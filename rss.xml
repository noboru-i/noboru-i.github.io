<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by noboru-i]]></title><description><![CDATA[noboru-iのメモ的な何かです。]]></description><link>https://noboru-i.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Fri, 13 Jul 2018 17:02:56 GMT</lastBuildDate><item><title><![CDATA[Weekly news at 2018/07/13]]></title><description><![CDATA[2018/07/13のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/07/13/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/07/13/</guid><pubDate>Fri, 13 Jul 2018 17:01:08 GMT</pubDate><content:encoded>&lt;h2&gt;React Nativeハイブリッドアプリへの挑戦 ~Part1: Monorepo/CI~ - Quipper Product Team Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://quipper.hatenablog.com/entry/2018/07/02/080000&quot;&gt;https://quipper.hatenablog.com/entry/2018/07/02/080000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AirbnbがReact Nativeやめた記事を書いたことで発生した、カウンター記事の一つ。（だと思ってます）&lt;/p&gt;
&lt;p&gt;これだけ話を聞くということは、それなりに運用事例があるはずなので、こういった記事が出てくることはありがたい。&lt;/p&gt;
&lt;p&gt;Quipperは、iOS/Androidのネイティブアプリから、徐々にReactNativeを導入していっているらしい。
こういった判断も出てくるだろうし、逆にReactNativeからネイティブを徐々に増やしていくこともあるだろうから、こういった記事はありがたい。&lt;/p&gt;
&lt;h2&gt;メルカリJP初のiOSリアーキテクチャは、なぜ「最高に楽しい」のか - mercan（メルカン）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://mercan.mercari.com/entry/2018/07/02/170000&quot;&gt;https://mercan.mercari.com/entry/2018/07/02/170000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ios/&quot;&gt;iOS&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メルカリがiOSの技術的負債を解消していっているはなし。&lt;/p&gt;
&lt;p&gt;1つのアプリを100人で開発する未来、とか想像がつかない。。。
また、開発をしている人もいる状態でリアーキテクチャをしていくのは大変だろうに、それを淡々とやっているように見えるのはすごい。&lt;/p&gt;
&lt;p&gt;ちょっと規模がでかすぎて参考にならないかもしれないけど、一定の結果が出た時点でカンファレンスでの発表などもあるだろうから、注視していこう。&lt;/p&gt;
&lt;p&gt;どうでもいいですが、曲面ディスプレイいいなぁ。。&lt;/p&gt;
&lt;h2&gt;MongoDB Moblie発表。フル機能のMongoDBがiOS/Androidに対応、サーバのMongoDBとのデータ同期も可能に － Publickey&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.publickey1.jp/blog/18/mongodb_mobliemongodbiosandroidmongodb.html&quot;&gt;https://www.publickey1.jp/blog/18/mongodb_mobliemongodbiosandroidmongodb.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/serverless/&quot;&gt;Serverless&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MongoDBをAndroid/iOSのローカルで動かせるようになった、とのこと。
また、「MongoDB Stitch」を使うことで、サーバとローカルのMongoDBを同期できるとのこと。&lt;/p&gt;
&lt;p&gt;Firebase Realtime Databaseのように使えるイメージですかね？&lt;/p&gt;
&lt;p&gt;MongoDBは、障害耐性だったか何かを考慮すると3インスタンス以上必要、みたいな話を聞いて、小規模だったら使えないかなーと思ってましたが、MongoDB Stitchみたいなサービスが出て、ローカルのDBとも同期できるんだったら、ちょっと興味が出てきましたね。
Firebase周りのツールとの差異は調べてみたいですね。&lt;/p&gt;
&lt;h2&gt;AndroidのCI時間を10分短縮し、開発を爆速にするためのKarakuriを作った話 - Mercari Engineering Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tech.mercari.com/entry/2018/07/04/110000&quot;&gt;https://tech.mercari.com/entry/2018/07/04/110000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/cd/&quot;&gt;CD&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Androidアプリ開発周りのいろいろを、CircleCI 2.0を利用して改善している話。&lt;/p&gt;
&lt;p&gt;個人的には、私の作ったライブラリがメルカリで使われてるっぽいのがうれしかったです。&lt;/p&gt;
&lt;p&gt;やってることの多くは、弊社でもやってることが多かったです。
ただ、Androidでのfastlaneはあまりやったことが無いので、今度試してみようと思います。&lt;/p&gt;
&lt;h2&gt;フロントエンドの「想定外」に対応する考え方とTipsいくつか | ダーシマ・ヱンヂニヤリング&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://necomesi.jp/blog/tsmd/posts/229&quot;&gt;https://necomesi.jp/blog/tsmd/posts/229&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cookie無効の場合にも見れるサイトにしましょう、という話。&lt;/p&gt;
&lt;p&gt;まぁ、できることならやるに越したことはないけど、その作業をやる工数に見合うものなのか？は考えたほうがいいかなーと思いました。
remで実装する、などは最初から考慮しておけばいいだけなので、やるべきですかね。たぶん。&lt;/p&gt;
&lt;p&gt;あとは、受託でやる場合は、要件で詰めておく必要がありそうですね。
「JavaScriptが切られた場合、何も動かないですけど良いですよね？」みたいな。（極論だけど。。&lt;/p&gt;
&lt;h2&gt;DMM動画サービスの問題を解決しようとしている話（スタイルガイド編） - DMM inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.dmm.com/entry/2018/07/05/styleguide&quot;&gt;https://inside.dmm.com/entry/2018/07/05/styleguide&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;継続的な開発により、ばらばらになってしまったデザインを統一していく話。&lt;/p&gt;
&lt;p&gt;個人的には、新規案件に入ることの方が多いので、ここまで大規模になることは少ないかな。
とはいえ、数ヶ月運用するだけでもバラバラになりがちなので、UIインベントリを作っていくのは良さそう。
Atomic Design本も読んだので、それも参考にしたい。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/06/22]]></title><description><![CDATA[2018/06/22のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/06/22/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/06/22/</guid><pubDate>Fri, 22 Jun 2018 17:01:03 GMT</pubDate><content:encoded>&lt;h2&gt;「Dockerによるアプリケーション開発環境構築ガイド」はプロのエンジニア必読の一冊だ（断言） - Lean Baseball&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://shinyorke.hatenablog.com/entry/docker&quot;&gt;http://shinyorke.hatenablog.com/entry/docker&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/docker/&quot;&gt;Docker&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker本の紹介。&lt;/p&gt;
&lt;p&gt;最近、Dockerをちょっと触ったけど、なんとなく使うことはできても、いまいち理解しきれてない感じなので、そのうち読んで見る。&lt;/p&gt;
&lt;h2&gt;Introducing Zeplin 2.0 — Components and a ton more goodies&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.zeplin.io/introducing-zeplin-2-0-components-and-a-ton-more-goodies-7c09dacc1f48&quot;&gt;https://blog.zeplin.io/introducing-zeplin-2-0-components-and-a-ton-more-goodies-7c09dacc1f48&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zeplinがバージョン2になって、コンポーネントベースでのデザインとの親和性が高くなった。&lt;/p&gt;
&lt;p&gt;貼ってあるgifアニメを見たら、
・カンプからコンポーネントへの遷移
・コンポーネントから、利用されているカンプがわかる
とか、良さげ。&lt;/p&gt;
&lt;h2&gt;いつ ReactNative を使っても大丈夫か - mizchi’s blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://mizchi.hatenablog.com/entry/2018/06/20/115539&quot;&gt;http://mizchi.hatenablog.com/entry/2018/06/20/115539&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mizchiさんの考える、ReactNative採用可否フローチャート。&lt;/p&gt;
&lt;p&gt;Expo未経験なので、それでどこまで楽になるんだろう？というのは未知数ですが、全体的には同意。&lt;/p&gt;
&lt;p&gt;極論、Webサイトをそのままアプリ化するのであればRNを使えそう、という域を超えない印象。
（アプリらしさとかを考えると辛そう、みたいな。）&lt;/p&gt;
&lt;h2&gt;iOSの11.3からのPWA対応でできるようになったこと – Takeshi Amano – Medium&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@takeshiamano/ios%E3%81%AE11-3%E3%81%8B%E3%82%89%E3%81%AEpwa%E5%AF%BE%E5%BF%9C%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8-313f638a172b&quot;&gt;https://medium.com/@takeshiamano/ios%E3%81%AE11-3%E3%81%8B%E3%82%89%E3%81%AEpwa%E5%AF%BE%E5%BF%9C%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8-313f638a172b&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ios/&quot;&gt;iOS&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最新のiOSにて、PWA的な出来ることのまとめ。&lt;/p&gt;
&lt;p&gt;iOSとAndroidでの差も書いてあり、実装時には一通り確認したほうが良さそう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/06/15]]></title><description><![CDATA[2018/06/15のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/06/15/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/06/15/</guid><pubDate>Fri, 15 Jun 2018 17:01:19 GMT</pubDate><content:encoded>&lt;h2&gt;データ特性による圧縮されやすいJPEG/PNGファイルの作り方 - hitomedia Tech Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.hitomedia.jp/entry/2018/06/08/200816&quot;&gt;http://tech.hitomedia.jp/entry/2018/06/08/200816&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JPEGやPNG画像の容量の減らし方。&lt;/p&gt;
&lt;p&gt;画像の容量が大きいと、特にWebサイトの表示に時間がかかり、離脱率が上がってしまう。体験も良くない。&lt;/p&gt;
&lt;p&gt;個人的には、背景ぼかしによって半分ぐらいの容量になるパターンもある、というのが意外だったので、何かの個人サービスで使う機会があれば試してみたい。&lt;/p&gt;
&lt;h2&gt;introduce Material Theming ~practice~ - Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/mochico/introduce-material-theming-practice&quot;&gt;https://speakerdeck.com/mochico/introduce-material-theming-practice&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Material Themingの意味と現状。&lt;/p&gt;
&lt;p&gt;Flutterはほぼできてるけど、他のプラットフォームではまだ足りないものが多そう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/06/08]]></title><description><![CDATA[2018/06/08のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/06/08/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/06/08/</guid><pubDate>Fri, 08 Jun 2018 17:01:12 GMT</pubDate><content:encoded>&lt;h2&gt;マイクロサービスの思想から捉える Backends for Frontendsとその類似パターン / Backends for Frontends and its similar pattern from the microservices perspective - Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/qsona/backends-for-frontends-and-its-similar-pattern-from-the-microservices-perspective&quot;&gt;https://speakerdeck.com/qsona/backends-for-frontends-and-its-similar-pattern-from-the-microservices-perspective&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/bff/&quot;&gt;BFF&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/microservice/&quot;&gt;microservice&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マイクロサービスの前段として、BFFをおいて運用してるはなし。&lt;/p&gt;
&lt;p&gt;あんまり、アプリの前にBFFを置いて、しかもそれがgRPCってのは、発想が無かった。
どこかでやってみたい。&lt;/p&gt;
&lt;h2&gt;Dockerfileを書くときに気をつけていること10選 - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/c18t/items/f3a911ef01f124071c95&quot;&gt;https://qiita.com/c18t/items/f3a911ef01f124071c95&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/docker/&quot;&gt;Docker&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dockerfileを書くときに気をつけることだったり、アンチパターンの紹介。&lt;/p&gt;
&lt;p&gt;最近はサーバ側やることが少ないけど、Dockerfile書く前に一度見直した方が良さげ。&lt;/p&gt;
&lt;h2&gt;PWAで表示速度が2倍に！ スピード改善を妥協しない日経電子版に学ぶ、PWAのメリット＆デメリット - エンジニアHub｜若手Webエンジニアのキャリアを考える！&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://employment.en-japan.com/engineerhub/entry/2018/06/05/110000&quot;&gt;http://employment.en-japan.com/engineerhub/entry/2018/06/05/110000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PWAが騒がれる前から実装を始めた、日経電子版の話。&lt;/p&gt;
&lt;p&gt;Firefoxのバグだったり、情報が少なすぎたりで、かなりつらそう。
ただ、それを乗り越えたことで、いろんなイベントで見かけるし、技術的なプレゼンスがかなり上がってる印象。&lt;/p&gt;
&lt;p&gt;やっぱり、PWAはキャッシュの設計が一番大変そう。やったことないので、どこかで関わりたい。&lt;/p&gt;
&lt;p&gt;Workbox というのも知らなかったので、どこかのタイミングで調べてみたい。&lt;/p&gt;
&lt;h2&gt;飲み会IoTボタン作った - hitode909の日記&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sushi.money/entry/2018/06/06/234110&quot;&gt;http://blog.sushi.money/entry/2018/06/06/234110&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/aws/&quot;&gt;AWS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/iot/&quot;&gt;IoT&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;オフィスフロアが複数あり、自然発生的に始まる飲み会をIoTの力で盛り上げる仕組み。&lt;/p&gt;
&lt;p&gt;AWSのIoTボタンって、単機能過ぎて何に使うんだ？と思ってたけど、こうやって使えばいいのか。参考になる。&lt;/p&gt;
&lt;h2&gt;Kyash Androidアプリのカード情報入力部分のちょっとした改善 - Kyash Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.kyash.co/entry/2018/06/07/193712&quot;&gt;http://blog.kyash.co/entry/2018/06/07/193712&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Androidのクレジットカード入力周りの知見。&lt;/p&gt;
&lt;p&gt;コードも具体的で、クレジットカードの入力とかはまーまーあるシチュエーションなので、遭遇したときは参考にしよう。&lt;/p&gt;
&lt;h2&gt;BFF’s cosmos in FOLIO sec at uit // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/quramy/bffs-cosmos-in-folio-sec-at-uit&quot;&gt;https://speakerdeck.com/quramy/bffs-cosmos-in-folio-sec-at-uit&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/bff/&quot;&gt;BFF&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BFFの上手く行った点と、そうでなかった点。&lt;/p&gt;
&lt;p&gt;上手く行ってる部分はなるほどと思う反面、ダッシュボード周りの話はたしかに複雑になりそうだなーと。
ある程度設計した上で始めたほうがいいんだろうなー、という感想。&lt;/p&gt;
&lt;h2&gt;GitFlowは使わない！シンプルな「GitFeatureFlow」を紹介します - ぐるなびをちょっと良くするエンジニアブログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://developers.gnavi.co.jp/entry/GitFeatureFlow/koyama&quot;&gt;http://developers.gnavi.co.jp/entry/GitFeatureFlow/koyama&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/git/&quot;&gt;Git&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitFlowでもGitHubFlowでも無い、新しく考案したFlowのはなし。&lt;/p&gt;
&lt;p&gt;test-env ブランチがどうやって生まれて、どのタイミングでmasterと動悸するんだろう？とか、
feature1とfeature2がマージされたtest-envでテストしておいて、feature1だけmasterにマージして本当に大丈夫か？（feature2がマージされてたからちゃんと動いてたり？）とか、
謎がいろいろありました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/06/01]]></title><description><![CDATA[2018/06/01のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/06/01/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/06/01/</guid><pubDate>Fri, 01 Jun 2018 17:01:25 GMT</pubDate><content:encoded>&lt;h2&gt;React NativeをWebに持ってくることの意味 - ナカザンドットネット&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.nkzn.info/entry/2018/05/29/210030&quot;&gt;http://blog.nkzn.info/entry/2018/05/29/210030&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React Native for Webとは何なのか、をベースに、ブラウザでのアプリケーション開発の辛さの言語化。&lt;/p&gt;
&lt;p&gt;個人的には、ReactNativeで書いたアプリを、そのままブラウザでレンダリングしてほしかったけど、そういうものでは無さそう？
改めて、調べてみよう。&lt;/p&gt;
&lt;h2&gt;Android Testは“Write once, run everywhere”の夢を見るか？ - Google スライド&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1M_WMloMI18MNUYBSx9xHH3HiGktZIcTk4gG1PPfD_mg/edit#slide=id.p&quot;&gt;https://docs.google.com/presentation/d/1M&lt;em&gt;WMloMI18MNUYBSx9xHH3HiGktZIcTk4gG1PPfD&lt;/em&gt;mg/edit#slide=id.p&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高速なテストと、信頼性の高いテストを、同じ記述で実行できるっぽい。良さげ。&lt;/p&gt;
&lt;h2&gt;ユーザ情報を保存する時のテーブル設計 - そーだいなるらくがき帳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://soudai.hatenablog.com/entry/2018/05/01/204442&quot;&gt;https://soudai.hatenablog.com/entry/2018/05/01/204442&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いろんなパターンの詳細情報を持つテーブルの設計方法について、一つの指針。&lt;/p&gt;
&lt;p&gt;たしかに、usersというidだけを管理するテーブルを作って、 user_detail に情報をもたせるのは良さそう。（ロック周り、あんまり詳しくないけど）&lt;/p&gt;
&lt;p&gt;ユーザの有効・無効などの状態は悩みどころですよね。
毎回 JOIN するのも面倒・漏れが出たりするし、管理画面ではそれを除外して全件見たかったり。&lt;/p&gt;
&lt;h2&gt;【Android】Google IO 2018で新発表された navigation についての詳細レポート - DMM inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.dmm.com/entry/2018/05/25/android-navigation&quot;&gt;https://inside.dmm.com/entry/2018/05/25/android-navigation&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Architecture Componentに新たに仲間入りした、Navigationについての記事。&lt;/p&gt;
&lt;p&gt;Fragmentでの画面遷移に悪い思い出しかないけど、もうちょっと安定したら使ってみようかと思います。
いまのところ、まだalphaですし、不具合が多そうな印象。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/05/25]]></title><description><![CDATA[2018/05/25のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/05/25/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/05/25/</guid><pubDate>Fri, 25 May 2018 17:01:06 GMT</pubDate><content:encoded>&lt;h2&gt;今日からGDPR施行だけど実は何もしてなかったぜというWEB担当者のために書いた | フジイユウジ::ドットネット&lt;/h2&gt;
&lt;p&gt;[今日からGDPR施行だけど実は何もしてなかったぜというWEB担当者のために書いた | フジイユウジ::ドットネット](今日からGDPR施行だけど実は何もしてなかったぜというWEB担当者のために書いた | フジイユウジ::ドットネット)&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;p&gt;これで完璧、というわけではないけど、最低限やっておくべきこと、という感じ？&lt;/p&gt;
&lt;p&gt;正直、「GDPRなんか怖い」ってだけだったので、ちょっとは理解できた気がする。&lt;/p&gt;
&lt;p&gt;ただ、法律周りは解釈が難しかったりするので、関わるときは、自分でもちゃんと調べたほうがよさげ。&lt;/p&gt;
&lt;h2&gt;ネイティブアプリの代わりにPWAで戦う選択肢 / pwa-instead-of-native // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/mottox2/pwa-instead-of-native&quot;&gt;https://speakerdeck.com/mottox2/pwa-instead-of-native&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ネイティブアプリを作らずに、PWAだけで行く選択肢。&lt;/p&gt;
&lt;p&gt;個人的に新しく知ったことはあんまり無かったけど、うまくまとまってたし、再認識は出来た。&lt;/p&gt;
&lt;p&gt;特に、日本だとiOSユーザが多くて、Safariの対応が遅いことが足を引っ張ってる、というのはたしかになーと思った。&lt;/p&gt;
&lt;h2&gt;Google Developers Japan: AndroidX の紹介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developers-jp.googleblog.com/2018/05/hello-world-androidx.html&quot;&gt;https://developers-jp.googleblog.com/2018/05/hello-world-androidx.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Support Libraryなどの再編の話。&lt;/p&gt;
&lt;p&gt;次の28系のリリースは、とりあえず今のままの仕組みで乗り切れそう。&lt;/p&gt;
&lt;p&gt;ただ、継続的に開発していくようなプロジェクトであれば、新しい &lt;code class=&quot;language-text&quot;&gt;androidx.&lt;/code&gt; に乗っかる必要があるけど、いまはまだアルファなので製品への導入は出来ないだろうし。
ベータぐらいが出てから、移行のやり方を構築しておいて、stable版が出たらさっさと置き換える、ってのが良さそう。&lt;/p&gt;
&lt;h2&gt;「結局Nuxt.jsって何がいいの？」に対する回答 by potato4d&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://slides.com/potato4d/vuejs_meetup7&quot;&gt;https://slides.com/potato4d/vuejs_meetup7&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nuxt.jsをなぜ導入するか？のはなし。&lt;/p&gt;
&lt;p&gt;私も、最初は「SSRを実現するためのツール」だと思ってましたが、Vue.js界のRailsみたいなイメージの方が合ってそう。&lt;/p&gt;
&lt;p&gt;たしかに、webpackだったりbabelだったりのいい感じの設定って、ある程度移り変わっていくし、それが一定の指針のもとにまとめられてるのは便利そう。&lt;/p&gt;
&lt;h2&gt;非同期コミュニケーションにおけるドキュメント - VOYAGE GROUP techlog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techlog.voyagegroup.com/entry/2018/05/22/080000&quot;&gt;http://techlog.voyagegroup.com/entry/2018/05/22/080000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ドキュメントをいかに書いて、いかにメンテしていくか、という話。&lt;/p&gt;
&lt;p&gt;やっぱり、コードで図を書くというのは良いですよね。&lt;/p&gt;
&lt;p&gt;CSV Schemaは初めて聞きました。システム連携とか、大量データのアップロードとか、CSVを使う機会はまだあるので、そのときには思い出そうと思います。&lt;/p&gt;
&lt;p&gt;短期的なドキュメントや陳腐化したドキュメントを削除する、ってのは勇気がいる行為だけど、大切ですよねー。&lt;/p&gt;
&lt;p&gt;長期的なものは、Asciidocにまとめて、目次とかも生成されるようにする、ってのは良いですね。&lt;/p&gt;
&lt;h2&gt;Automagic Podcast — UI Designer の BEMU…&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://automagic.fm/post/174128066885/bemu&quot;&gt;http://automagic.fm/post/174128066885/bemu&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そもそも、相談者のBEMUさんという方が、「デザインのフィードバックをネット越しにもらうため」にいろいろやっているようでした。
また、Loomというツールを知らなかったのですが、画面とカメラで動画を保存できるっぽい？ので、複数人に非同期で動画でメッセージを伝えるのには良いのかも？と思いました。&lt;/p&gt;
&lt;h2&gt;GoogleI/O行ってないけどAndroid Jetpack気になったので調べてみた - t-miliya612のブログ&lt;/h2&gt;
&lt;p&gt;[GoogleI/O行ってないけどAndroid Jetpack気になったので調べてみた - t-miliya612のブログ](GoogleI/O行ってないけどAndroid Jetpack気になったので調べてみた - t-miliya612のブログ)&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;p&gt;Jetpackのざっくりした説明。&lt;/p&gt;
&lt;p&gt;AACとかも、ちゃんと使ったことないので、一度標準設定からアプリを作ってみておかないと。&lt;/p&gt;
&lt;h2&gt;やはりお前たちのRepositoryは間違っている - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/mikesorae/items/ff8192fb9cf106262dbf&quot;&gt;https://qiita.com/mikesorae/items/ff8192fb9cf106262dbf&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Repositoryパターンの、アンチパターンとその解決法集。&lt;/p&gt;
&lt;p&gt;Repositoryを分割してしまうことで使うときに迷ってしまったり、テーブル単位で作ってしまって実装場所に迷ってしまったり、特別なQueryを含めてしまってRepositoryが太ってしまったり。&lt;/p&gt;
&lt;p&gt;Repositoryは、既存のアプリにも導入しやすいので、なんとなく使い始めちゃうけど、アンチパターンも知って、ちゃんと使っていきたい。&lt;/p&gt;
&lt;h2&gt;若い世代が知らない2000年代のHTMLコーディングの地獄 - ICS MEDIA&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ics.media/entry/17960&quot;&gt;https://ics.media/entry/17960&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2000年代のHTMLコーディングの紹介など。&lt;/p&gt;
&lt;p&gt;仕事始めた頃は、まだ全然こんな記述が残ってて、当時は知識なかったのでコピペしてたけど、今あらためて説明してもらうとよく理解できた。
角丸画像とか、CSSハックとか、最近は見なくなったけど、昔はこれが必要だったのね。&lt;/p&gt;
&lt;p&gt;さすがにこのレベルのものは使ってないけど、フロントが本職じゃない身としては、気がついたらレガシー技術になってるものを使ってそうなので、随時キャッチアップをして行きたいですね。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/05/18]]></title><description><![CDATA[2018/05/18のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/05/18/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/05/18/</guid><pubDate>Fri, 18 May 2018 17:01:12 GMT</pubDate><content:encoded>&lt;h2&gt;Androidアプリ の minSdkVersion を21にした話 - クックパッド開発者ブログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techlife.cookpad.com/entry/2018-05-15-android-minsdkversion-21&quot;&gt;http://techlife.cookpad.com/entry/2018-05-15-android-minsdkversion-21&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メルカリというC向けアプリの巨人が、4系を切ろうとしている話。 🎉 &lt;/p&gt;
&lt;p&gt;今後は、提案などで「あのメルカリですら4系切ってるのに、今回のアプリでそれ以上にサポートする必要ありますか」と煽っていけそう。&lt;/p&gt;
&lt;p&gt;minSdkVersionを上げた場合の注意点や、4系から5系に上げることで使えるものなどがうまくまとめられている。これも、上げるための交渉材料になりそう。&lt;/p&gt;
&lt;h2&gt;持続可能なAngularアプリケーション開発のために大事なこと - lacolaco&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://lacolaco.hatenablog.com/entry/2018/05/15/121514&quot;&gt;https://lacolaco.hatenablog.com/entry/2018/05/15/121514&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“持続可能”であることを重点的に、ライブラリの選択などのはなし。&lt;/p&gt;
&lt;p&gt;Angularに限った話ではないですが、周辺のライブラリに依存することで、フレームワーク本体のアップデートの足かせになることはありますよね。
とはいえ、初期の開発速度を優先すると周辺のライブラリもうまく使っていくことになる。
十分に時間が無い中で選択する場面もあると思うので、そのライブラリがフレームワーク本体とどのような関係性なのかを知っておく、というのが理想的ではありそう。&lt;/p&gt;
&lt;h2&gt;ざっくり理解するPaxos - 小野マトペの納豆ペペロンチーノ日記&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://matope.hatenablog.com/entry/2018/05/13/204749&quot;&gt;http://matope.hatenablog.com/entry/2018/05/13/204749&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/分散システム/&quot;&gt;分散システム&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分散合意プロトコルのPaxosの説明。&lt;/p&gt;
&lt;p&gt;個人的に、これ自体には興味は無いんですが、意思決定の単一障害点だったり、Split-Brainの説明だったりがわかりやすく説明されていて勉強になりました。&lt;/p&gt;
&lt;h2&gt;リクルートライフスタイルにおける Frontend Ops の取り組みとその中で開発した OSS 「status-back」の紹介 - Tech Blog - Recruit Lifestyle Engineer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://engineer.recruit-lifestyle.co.jp/techblog/2018-05-16-frontend-ops/&quot;&gt;https://engineer.recruit-lifestyle.co.jp/techblog/2018-05-16-frontend-ops/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FrontendのCI環境のはなし。&lt;/p&gt;
&lt;p&gt;GitHubのStatuses APIを使って、lintやテストの各ステージごとにstatusを更新していくのは良いですね。
これにより、どこに問題があったか、GitHubの画面だけでわかる。&lt;/p&gt;
&lt;p&gt;こんな感じでOSSを作って公開してく社風はいいですね。&lt;/p&gt;
&lt;h2&gt;iOSアプリのサブミット自動化と証明書管理の効率化 - クックパッド開発者ブログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techlife.cookpad.com/entry/2018/05/17/113000&quot;&gt;http://techlife.cookpad.com/entry/2018/05/17/113000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ios/&quot;&gt;iOS&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOSの証明書周りの難しさ・めんどくささのはなし。&lt;/p&gt;
&lt;p&gt;「プロのコードサイン解決者」ってのが格好いいっすねｗ&lt;/p&gt;
&lt;p&gt;fastlaneで申請する、ってのも良さそうだけど、受託だとなかなかそこまで統合出来ないよなーと。&lt;/p&gt;
&lt;p&gt;そこまではイメージついてたんですが、matchは使ったこと無かったので、デメリットも知れてよかった。&lt;/p&gt;
&lt;p&gt;解決策も見えてそうなので、matchの今後に期待ですね。&lt;/p&gt;
&lt;h2&gt;独立したコアレイヤパターン - Shin x Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.shin1x1.com/entry/independent-core-layer-pattern&quot;&gt;http://blog.shin1x1.com/entry/independent-core-layer-pattern&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「独立したコアレイヤパターン」という（？）新しいアーキテクチャの名前。&lt;/p&gt;
&lt;p&gt;まだちゃんと読めてないけど、クリーンアーキテクチャなどから、いくつかを省略して簡略化したイメージ？
フレームワークとも分離しちゃうというと、結構大変なイメージ。
業務アプリケーションみたいに、長く・安定的に使って行くものには良さそうな印象。&lt;/p&gt;
&lt;h2&gt;最適な Java の Docker イメージを選びたい - k11i.biz&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://k11i.biz/blog/2018/05/17/base-docker-images-for-java/&quot;&gt;https://k11i.biz/blog/2018/05/17/base-docker-images-for-java/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Javaを使う際のDockerイメージ、いろんなものがあるんですね。&lt;/p&gt;
&lt;p&gt;とりあえずは、 OpenJDK を使っておけば良さそう。&lt;/p&gt;
&lt;h2&gt;Androidアプリ の minSdkVersion を21にした話 - クックパッド開発者ブログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techlife.cookpad.com/entry/2018-05-15-android-minsdkversion-21&quot;&gt;http://techlife.cookpad.com/entry/2018-05-15-android-minsdkversion-21&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クックパッドという多くのユーザに利用されているアプリがminSdkVersionを上げたという喜ばしい話。&lt;/p&gt;
&lt;p&gt;たしかに、 JobScheduler 周りは大変そうだなーと思ってましたが、4系を切ってしまえば、普通に利用できそうですね。&lt;/p&gt;
&lt;p&gt;それ以外にも、4系と5系の境目の技術がまとめられているので、これがそのまま説得材料にもなりそう。&lt;/p&gt;
&lt;p&gt;「サポート外となったOSはどうなるのか？」については、見逃しやすそうなので、切る場合には気をつけておいた方が良さそう。&lt;/p&gt;
&lt;h2&gt;Androidプロジェクト内の未使用のリソースを削除するgradle pluginを作りました - Konifar’s WIP&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://konifar.hatenablog.com/entry/2018/05/13/125311&quot;&gt;http://konifar.hatenablog.com/entry/2018/05/13/125311&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;konifarさんが、便利なgradle pluginをつくったようです。&lt;/p&gt;
&lt;p&gt;CIでやるのも良さそうですね。
今度、個人プロジェクトや、タイミングがあれば仕事でも使ってみようと思います。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/05/11]]></title><description><![CDATA[2018/05/11のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/05/11/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/05/11/</guid><pubDate>Fri, 11 May 2018 17:01:24 GMT</pubDate><content:encoded>&lt;h2&gt;Android App Bundle/Dynamic feature modulesにみるモジュール化の未来 - tomoima525’s blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tomoima525.hatenablog.com/entry/2018/05/10/092208&quot;&gt;http://tomoima525.hatenablog.com/entry/2018/05/10/092208&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google I/O 2018で発表された、apkサイズの削減のための仕様をまとめたもの。&lt;/p&gt;
&lt;p&gt;個人アプリでNDKを使ったものもあるので、これを試してみるのが良さそうです。
また、Store側の処理になるので、対象となるOSバージョンが広そうなのが良いですね。&lt;/p&gt;
&lt;p&gt;また、internal testもすぐに公開してくれるのであれば、DeployGateの代わりに出来るかも？ちょっと試してみる必要がありそうですね。&lt;/p&gt;
&lt;h2&gt;Google I/O Developer Keynote Android開発のまとめ | TechBooster&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://techbooster.org/android/18096/&quot;&gt;https://techbooster.org/android/18096/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Android App Bundle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この前、keystoreをPlay consoleにアップロードする仕組みが出来てたけど、これの布石だったのかな。
たしかに、ダウンロードするapkの中に、他のアーキテクチャ用のバイナリとか必要ないよねー。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Jetpack&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こっちは、AndroidStudioにかなり機能が増えそうな印象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Slices&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また、Android開発者が覚えるべき知識・機能が増えたのね。。。ぐらいの印象です。&lt;/p&gt;
&lt;h2&gt;Speaker Deck で最高の URL を生成する技術 - kakakakakku blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://kakakakakku.hatenablog.com/entry/2018/05/07/003042&quot;&gt;http://kakakakakku.hatenablog.com/entry/2018/05/07/003042&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;p&gt;Speaker DeckのURL発行の仕組みについて。&lt;/p&gt;
&lt;p&gt;今まで、気にはなっていたけど何もしてなかったので、今度アップロードすることがあれば、意識してやってみようと思います。&lt;/p&gt;
&lt;h2&gt;mikutterのTwitterコンシューマキーが凍結されました - mikutter blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://mikutter.hatenablog.com/entry/2018/05/05/164014&quot;&gt;http://mikutter.hatenablog.com/entry/2018/05/05/164014&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;p&gt;Twitterのコンシューマキーが凍結されてしまったので、その後の対応など。
斜め読みしかしてないですが。。&lt;/p&gt;
&lt;p&gt;テスト環境用のTwitterアプリを、自分のアカウントで発行したりすることがあったんですが、今後は捨てアカウントとかで取ったほうが安全かもしれませんね。。（マルチアカウントの問題は別途あるかもしれないので、そこは要確認）&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/05/04]]></title><description><![CDATA[2018/05/04のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/05/04/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/05/04/</guid><pubDate>Fri, 04 May 2018 17:01:05 GMT</pubDate><content:encoded>&lt;h2&gt;iOSの自動化と仕組み化 ~コードと設計に集中する~ // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/motokiee/iosfalsezi-dong-hua-toshi-zu-mihua-kodotoshe-ji-niji-zhong-suru&quot;&gt;https://speakerdeck.com/motokiee/iosfalsezi-dong-hua-toshi-zu-mihua-kodotoshe-ji-niji-zhong-suru&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ios/&quot;&gt;iOS&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メルカリのiOS周りの自動化・仕組み化の話。&lt;/p&gt;
&lt;p&gt;Dangerでリリースノートの更新を促したり、ドキュメント化を促進してるのは良さげ。（具体的にはどうやってるんだろ？&lt;/p&gt;
&lt;p&gt;CIについて、メルカリではBitriseを使ってるんですね。&lt;/p&gt;
&lt;p&gt;自社の中核サービスであれば、ここまでしっかり作る意味は強いけど、受託で短期間のプロジェクトでどこまでやるか、というのは検討が必要な気がしますね。手軽に導入しておけば、しきい値はかなり下げられそうですが。&lt;/p&gt;
&lt;h2&gt;ディープリンクをめぐる歴史とReact NativeにFirebase Dynamic Linksを導入する手順 - KitchHike Tech Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.kitchhike.com/entry/2018/04/29/222634&quot;&gt;http://tech.kitchhike.com/entry/2018/04/29/222634&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/firebase/&quot;&gt;Firebase&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ios/&quot;&gt;iOS&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ディープリンク周りの歴史・経緯の紹介と、React Nativeでの具体的な導入事例。&lt;/p&gt;
&lt;p&gt;Firebase Dynamic Linksの仕組みについても紹介されているので、中身がわかって良い。&lt;/p&gt;
&lt;p&gt;この記事で紹介されているFirebaseコンソールからのDynamic Linkの作り方は、キャンペーンページなど、特定のページに飛ばしたい場合に有効ですね。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://firebase.google.com/docs/dynamic-links/use-cases/web-to-app&quot;&gt;https://firebase.google.com/docs/dynamic-links/use-cases/web-to-app&lt;/a&gt; などのドキュメントを見ると、 &lt;code class=&quot;language-text&quot;&gt;link&lt;/code&gt; などを動的にしていしても良いらしく、動的なページでも同じような仕組みで処理できそうですね。&lt;/p&gt;
&lt;h2&gt;Rails tips: 遅いクエリのログをDB設定変更なしで取るコツ（翻訳）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://techracho.bpsinc.jp/hachi8833/2018_04_26/55463&quot;&gt;https://techracho.bpsinc.jp/hachi8833/2018&lt;em&gt;04&lt;/em&gt;26/55463&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby/&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby on rails/&quot;&gt;Ruby on Rails&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ActiveSupport::Notifications&lt;/code&gt; を使って、性能の計測などが出来る話。
この記事では、slow queryに該当するものを、アプリケーションのレイヤーで取得した話。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ActiveSupport::Notifications&lt;/code&gt; を使えば、クエリだけじゃなく、他のものも取れそうなので、性能面で困ったときにはスッと書けると良さげ。
また、Rubyで書けるので、ちょっと複雑なフィルタリングとかも簡単に書けそうでよいですね。&lt;/p&gt;
&lt;h2&gt;エンジニアにダメ出しされたUIデザインでおさえておきたいポイント - Life is bitter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.life-is-bitter.com/entry/ui_checklist&quot;&gt;http://www.life-is-bitter.com/entry/ui_checklist&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Web系のデザインを、実装するときに「こんな場合は？」と聞かれないためのチェックリスト。&lt;/p&gt;
&lt;p&gt;逆に、エンジニアとしては、デザインを受け取って実装を始める前にチェックしたほうが良いリスト。&lt;/p&gt;
&lt;p&gt;案件によっては、focusやhoverが必要無い場合もあると思うのですべてを定義してもらう必要は無いですが、観点としては一通りチェックしたほうが良さそうですね。&lt;/p&gt;
&lt;h2&gt;デザインシステムにおける色の命名ルール : could&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.yasuhisa.com/could/article/design-sytem-color-name/&quot;&gt;http://www.yasuhisa.com/could/article/design-sytem-color-name/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;色に名前をつけましょう、また、そのつけ方の工夫の紹介。&lt;/p&gt;
&lt;p&gt;特にAndroidでは、colors.xmlなどで色を一括で管理し、各UIではその色を利用します。
デザインをPSDなどのデザインデータだけでもらっていると、実装するときに名前を付けなければならず、「redとつけたら、後から他の赤っぽい色が何個もあった」といったことが起こります。
実際にデザインしたデザイナであれば、「この赤はXXXという意図があり、こっちの赤とは別」といった意図があると思います。
そういった意図をエンジニアと共有するのは時間がかかるので、デザイナの方で色名を決めてくれるのは良さそうだなーと思いました。(意図まで共有した方が良いんですけどね)&lt;/p&gt;
&lt;h2&gt;本当にあった怖いプログラム（クソコード事例集） - 株式会社アクシア&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://axia.co.jp/2018-04-27&quot;&gt;https://axia.co.jp/2018-04-27&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;p&gt;Twitterで募集したクソコードをカテゴライズして、経験とともにコメント入ったもの。&lt;/p&gt;
&lt;p&gt;結果、リーダブルコードの逆を言っているだけのものも多そうですね。
また、個人的には「場合によってはOKじゃね。」ってのもありました。&lt;/p&gt;
&lt;p&gt;とはいえ、わかりやすくまとまっていて、時間が経っても基本的に変わらないものだと思うので、いいまとめでした。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/04/27]]></title><description><![CDATA[2018/04/27のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/04/27/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/04/27/</guid><pubDate>Fri, 27 Apr 2018 17:01:14 GMT</pubDate><content:encoded>&lt;h2&gt;[フロントエンド] PWA勉強会で使ったスライドを公開します - YoheiM .NET&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.yoheim.net/blog.php?q=20180419&quot;&gt;https://www.yoheim.net/blog.php?q=20180419&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PWAって何？に答えてくれるスライドと、その紹介。&lt;/p&gt;
&lt;p&gt;PWAって、技術要素の詰め合わせと言うよりは、枠組み・方針といったイメージのほうが近そう。&lt;/p&gt;
&lt;p&gt;技術要素についてもざっくりまとまっている良い資料。&lt;/p&gt;
&lt;h2&gt;CSSレスポンシブデザインをSPAで使うと破滅する - 橋本商会&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://scrapbox.io/shokai/CSS%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%92SPA%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%A8%E7%A0%B4%E6%BB%85%E3%81%99%E3%82%8B&quot;&gt;https://scrapbox.io/shokai/CSS%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B7%E3%83%96%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%92SPA%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%A8%E7%A0%B4%E6%BB%85%E3%81%99%E3%82%8B&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;レスポンシブなSPAでコンポーネントが表示されたり非表示にしたりするのはつらい。&lt;/p&gt;
&lt;p&gt;「素直にターゲットデバイス毎に別々のコンポーネントを書く」ってのが提唱されてて、たしかにそれが良さそう。&lt;/p&gt;
&lt;h2&gt;CASHのユーザビリティを支える（泥臭い）技術 // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/kmagai/cashfalseyusahiriteiwozhi-eru-ni-chou-i-ji-shu&quot;&gt;https://speakerdeck.com/kmagai/cashfalseyusahiriteiwozhi-eru-ni-chou-i-ji-shu&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;フェーズによっては、早すぎる最適化は良くないよね、という話。
そして、それはちゃんとリファクタリングしないと、苦しむことになる。&lt;/p&gt;
&lt;p&gt;個人的には、常にきれいなコードだけを書いて読みたいけど、ちゃんと利子を払える負債ならしかたないよね、という気持ちもある。&lt;/p&gt;
&lt;h2&gt;Android Oreoのプッシュ通知対応でハマった３つのこと · Androg&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://kwmt27.net/2018/04/21/push-notification-for-android-oreo/&quot;&gt;http://kwmt27.net/2018/04/21/push-notification-for-android-oreo/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;targetSdkVersion を上げなければいけない時期が近づいており、上げた場合のPUSH通知周りでハマったことの紹介。&lt;/p&gt;
&lt;p&gt;チャンネルの話は把握してたのですが、「すべての通知はチャンネルに割り当てなければならない」というのは把握してませんでした。設計にも関わる部分だと思うので、実装者だけで決められないことが多そうで、早めに詰めていく必要がありそうですね。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/04/20]]></title><description><![CDATA[2018/04/20のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/04/20/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/04/20/</guid><pubDate>Fri, 20 Apr 2018 17:01:05 GMT</pubDate><content:encoded>&lt;h2&gt;初めての「技術ブログ」書き方のご紹介 - SORACOM Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.soracom.jp/blog/2018/04/18/howto-techblog/&quot;&gt;https://blog.soracom.jp/blog/2018/04/18/howto-techblog/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/書く技術/&quot;&gt;書く技術&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技術ブログを書くときに参考になりそう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブログを書くときの動機&lt;/li&gt;
&lt;li&gt;記事の構成&lt;/li&gt;
&lt;li&gt;Google Drive使ったら画像の管理が便利&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exploring the v28 Android Design Support Library Additions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/exploring-android/exploring-the-v28-android-design-support-library-2c96c6031ae8&quot;&gt;https://medium.com/exploring-android/exploring-the-v28-android-design-support-library-2c96c6031ae8&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Support Library v28で追加になる Material view components の画像つき紹介。&lt;/p&gt;
&lt;p&gt;Chip は &lt;a href=&quot;https://www.slideshare.net/YukiYamamoto7/chip-93779438&quot;&gt;https://www.slideshare.net/YukiYamamoto7/chip-93779438&lt;/a&gt; でも紹介されてましたが、やっぱり便利そう。&lt;/p&gt;
&lt;p&gt;Bottom App Bar は、デザイナとの相談が必要ですが、うまくハマれば楽できそう。&lt;/p&gt;
&lt;p&gt;Material Button は、画像だけ見て「何が変わったんだろ？」とも思いましたが、 &lt;code class=&quot;language-text&quot;&gt;app:icon&lt;/code&gt; でアイコンをそれっぽい場所に置いてくれたり、便利機能が追加されてるっぽい。
ただ、 &lt;a href=&quot;https://material.io/guidelines/components/buttons.html#buttons-button-types&quot;&gt;https://material.io/guidelines/components/buttons.html#buttons-button-types&lt;/a&gt; を見ても、ボタンにアイコン付ける例が無い気がするんだけど。。&lt;/p&gt;
&lt;h2&gt;EarlGreyを使ってiOSのUIテストを自動で行う - BASE開発チームブログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://devblog.thebase.in/entry/2018/04/18/111306&quot;&gt;http://devblog.thebase.in/entry/2018/04/18/111306&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/testing/&quot;&gt;Testing&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ios/&quot;&gt;iOS&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOSのUIテストを通して、効果測定用のログが正しく送られているかを継続的にチェックする話。&lt;/p&gt;
&lt;p&gt;“google”の作った”iOS”のテストフレームワークということで違和感があり、使ったことなかったEarlGrey。&lt;/p&gt;
&lt;p&gt;EarlGrey自体はどっちでもいいですが、UIテスト時にログの送信をmock化しテストする、というのは良さそうな気がしますね。
ただ、&lt;code class=&quot;language-text&quot;&gt;XCTAssert&lt;/code&gt; でYES/NOを判定するのではなく、&lt;code class=&quot;language-text&quot;&gt;XCTAssertEqual&lt;/code&gt;とかでうまいこと比較できれば、“どう違っているか”を検出できそうな気がしますね。&lt;/p&gt;
&lt;h2&gt;ReactNativeプロジェクトのAndroid環境を整備する - クックパッド開発者ブログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techlife.cookpad.com/entry/2018/04/18/180000&quot;&gt;http://techlife.cookpad.com/entry/2018/04/18/180000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ReactNativeに関する連載3日目。今日はAndroidの話。&lt;/p&gt;
&lt;p&gt;標準で生成されるコードがアレなのでいろいろ整えたり、リリース前の準備などがいい感じにまとまってる。
冒頭にも書いてある通り、ライブラリ・ツールのバージョンが変わったら不要になる知識もありそうだけど、作ってリリースする前には一通り確認しておいたほうが良さそう。&lt;/p&gt;
&lt;h2&gt;CircleCIでgradleのテストを走らせているとプロセスが突然死するんですけどって時 - その手の平は尻もつかめるさ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://moznion.hatenadiary.com/entry/2018/04/17/220606&quot;&gt;https://moznion.hatenadiary.com/entry/2018/04/17/220606&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CircleCIというか、gradleの環境変数のはなし。&lt;/p&gt;
&lt;p&gt;gradleでの突然死はよくありますね。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/blob/master/.circleci/config.yml#L9&quot;&gt;https://github.com/DroidKaigi/conference-app-2018/blob/master/.circleci/config.yml#L9&lt;/a&gt;
みたいに、 &lt;code class=&quot;language-text&quot;&gt;GRADLE_OPTS&lt;/code&gt; じゃだめなのか？というのは、ちゃんと理解してないんですが、今度遭遇したらこれも試してみよう。&lt;/p&gt;
&lt;h2&gt;React Native アプリの開発基盤構築 - クックパッド開発者ブログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techlife.cookpad.com/entry/2018/04/17/090000&quot;&gt;http://techlife.cookpad.com/entry/2018/04/17/090000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React NativeのセットアップスクリプトやCIの話。&lt;/p&gt;
&lt;p&gt;実際に運用中のCodePushなどの構成なども書いてあった。
実際に構築する際には参考になりそう。&lt;/p&gt;
&lt;h2&gt;bundle install には —clean を指定する (特に Circle CI では) | Born Too Late&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.yuyat.jp/post/bundle-install-clean/&quot;&gt;https://blog.yuyat.jp/post/bundle-install-clean/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby/&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タイトルの通り。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;--clean&lt;/code&gt; を指定することで、もう使ってないバージョンのgemなどが消えるので、cacheのサイズが減り、CIも早くなるらしい。知らなかった。&lt;/p&gt;
&lt;h2&gt;Remote Config REST API and Versioning&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/JumpeiMatsuda1/remote-config-rest-api-and-versioning&quot;&gt;https://www.slideshare.net/JumpeiMatsuda1/remote-config-rest-api-and-versioning&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/firebase/&quot;&gt;Firebase&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remote ConfigをAPI経由で変更する話。&lt;/p&gt;
&lt;p&gt;また、 &lt;a href=&quot;https://github.com/jmatsu/remocon&quot;&gt;https://github.com/jmatsu/remocon&lt;/a&gt; というOSSで、それをラップしました、という話。&lt;/p&gt;
&lt;p&gt;Remoconは良さげですね。pullしたり、pushしたり。&lt;/p&gt;
&lt;h2&gt;Chipを使ってみる&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/YukiYamamoto7/chip-93779438&quot;&gt;https://www.slideshare.net/YukiYamamoto7/chip-93779438&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Design Support Libraryのv28に追加される&lt;code class=&quot;language-text&quot;&gt;Chip&lt;/code&gt;の話。&lt;/p&gt;
&lt;p&gt;v28は、まだAlpha 1なんですね。&lt;/p&gt;
&lt;p&gt;タグとかの表示に便利そう。&lt;/p&gt;
&lt;h2&gt;ActiveRecordを試すときに便利なやつ – r7kamura – Medium&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@r7kamura/activerecord%E3%82%92%E8%A9%A6%E3%81%99%E3%81%A8%E3%81%8D%E3%81%AB%E4%BE%BF%E5%88%A9%E3%81%AA%E3%82%84%E3%81%A4-f5a10a8c17d8&quot;&gt;https://medium.com/@r7kamura/activerecord%E3%82%92%E8%A9%A6%E3%81%99%E3%81%A8%E3%81%8D%E3%81%AB%E4%BE%BF%E5%88%A9%E3%81%AA%E3%82%84%E3%81%A4-f5a10a8c17d8&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby/&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1つのRubyファイルで、いろいろまとめる話。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;bundler/inline&lt;/code&gt;によって、Gemfileに書く内容をファイルの中に書ける。&lt;/p&gt;
&lt;p&gt;ActiveRecord関連のメソッドを利用して、メモリ内SQLiteを利用させたり、テーブル定義したり。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;minitest/autorun&lt;/code&gt;によって、テストを実行したり。&lt;/p&gt;
&lt;p&gt;書いてある通り、期待する動作を説明するために渡したり、メモとして残すのに便利そう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/04/13]]></title><description><![CDATA[2018/04/13のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/04/13/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/04/13/</guid><pubDate>Fri, 13 Apr 2018 17:01:06 GMT</pubDate><content:encoded>&lt;h2&gt;Gitのブランチ名を返すエイリアスを設定したら地味に捗った - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/kmszk/items/3de61ef75e30dedd6f6e&quot;&gt;https://qiita.com/kmszk/items/3de61ef75e30dedd6f6e&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/git/&quot;&gt;Git&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/shell/&quot;&gt;Shell&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;aliasを設定して、それを利用してGitのコマンドを使うようになったら便利だった、という話。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git push&lt;/code&gt; とかは、オプション設定したら良いのでは？と思わなくもないですが。&lt;/p&gt;
&lt;p&gt;ただ、実行するコマンドが同一になることで、補完が効きやすい、というのは良いですね。&lt;/p&gt;
&lt;h2&gt;システムで「性別」の情報を扱う前に知っておくべきこと - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/aoshirobo/items/32deb45cb8c8b87d65a4&quot;&gt;https://qiita.com/aoshirobo/items/32deb45cb8c8b87d65a4&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;システムで性別を扱う場合に考えることなど。&lt;/p&gt;
&lt;p&gt;たしかに、何も考えずに「会員登録時に生年月日と性別とぐらい入れさせるか」としてしまうことはある気がします。&lt;/p&gt;
&lt;p&gt;「本当に入力させる必要がある？」というのは、確認したほうが良いですね。&lt;/p&gt;
&lt;p&gt;また、コード体系がISO 5218として定められている、というのも知りませんでした。
たしかに、どうやってコード化する？というのはどーでもいい反面、悩み始めると終わらないものなので、「国際規格がこう言っているから」というのがあるのは助かりますね。&lt;/p&gt;
&lt;h2&gt;React Redux Real World Examples 〜先人から学ぶReact Reduxの知恵〜 | blog.tai2.net&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.tai2.net/real-world-redux.html&quot;&gt;https://blog.tai2.net/real-world-redux.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reduxで設計・実装する際に悩みそうな部分を、実際に使われているアプリケーションのコードを読み解くことで解決しようとしている。&lt;/p&gt;
&lt;p&gt;他のアプリケーションのコードを読んで見ることはあるけど、ここまで多数のアプリを、一定の関心事ごとに読んでいく、というのはやったことなかった。
ここまでまとまってると、Reduxについて他に悩んだことが出てきた場合にも、これを手がかりにコードを読み進めることができそう。&lt;/p&gt;
&lt;p&gt;ただ、実際にReduxによる実装をしたことが無いので、始めるとき・悩んだときにはこれを読み、コードを読んで活かしていきたい。&lt;/p&gt;
&lt;h2&gt;メルカリ Microservices Team による Terraform 運用とその中で開発したOSSの紹介 - Mercari Engineering Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.mercari.com/entry/2018/04/09/110000&quot;&gt;http://tech.mercari.com/entry/2018/04/09/110000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/infra/&quot;&gt;Infra&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Terraformの運用していく中で、 mercari/tfnotify を作った話。&lt;/p&gt;
&lt;p&gt;現在のメルカリでは、 &lt;em&gt;中央集権的なリポジトリですべての Terraform コードを管理&lt;/em&gt; しているらしい。
なるほど。&lt;/p&gt;
&lt;p&gt;重複したタイトル・メッセージだったら、古いコメントを削除するなど、実際に運用している感があっていいですね。&lt;/p&gt;
&lt;p&gt;「GitHubのPRにコメントする」と聞くとDangerをすぐに連想しましたが、ここまで特化しているものだと、個別のアプリケーションにしてしまって正解なのかも。（特に言及もされてないけど。）&lt;/p&gt;
&lt;p&gt;本筋からはずれますが、 &lt;a href=&quot;https://github.com/noboru-i/danger-checkstyle_format&quot;&gt;noboru-i/danger-checkstyle_format&lt;/a&gt; のREADMEにも、こんな感じでキャプチャ付けておくのが良さそう、と思いました。&lt;/p&gt;
&lt;h2&gt;Ruby on Rails 5.2正式版発表。Active Storageによるクラウドストレージ対応、Redisでのキャッシュ対応など － Publickey&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.publickey1.jp/blog/18/ruby_on_rails_52active_storageredis.html&quot;&gt;http://www.publickey1.jp/blog/18/ruby&lt;em&gt;on&lt;/em&gt;rails&lt;em&gt;52active&lt;/em&gt;storageredis.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby/&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby on rails/&quot;&gt;Ruby on Rails&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちょうど&lt;code class=&quot;language-text&quot;&gt;rails new&lt;/code&gt;したところだったけど、Rails 5.2.0って出たばっかりだったのね。&lt;/p&gt;
&lt;p&gt;Active Storageによる、S3とActive Recordの連携は、仕事でも使う場面がありそうな組み合わせなので、一度体験しておいた方が良さそう。&lt;/p&gt;
&lt;p&gt;Content Security Policyは、最近のセキュリティに対する意識の高まりから、勉強しておいたほうが良さそう。
DSLで書くにしても、もとを知らないと書けないし。&lt;/p&gt;
&lt;p&gt;それにしても、Railsはまだ新しい機能を追加していくんですね。&lt;/p&gt;
&lt;h2&gt;Nuxt.jsとFirebaseでSPA×SSR×PWA×サーバーレスを実現する - DMM inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.dmm.com/entry/2018/04/10/nuxt-firebase&quot;&gt;https://inside.dmm.com/entry/2018/04/10/nuxt-firebase&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/serverless/&quot;&gt;Serverless&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMMの中の人が、タイトル通りの構成を作る話。&lt;/p&gt;
&lt;p&gt;前半で、Nuxt.jsやSPAについて簡単に説明してあり、非エンジニアには最初にこのぐらい説明したらいいのかなーと、参考になった。&lt;/p&gt;
&lt;p&gt;Cloud FunctionsでNuxt.jsを動作させてしまう、ってのはちょっと特殊かも？と思いました。
また、そのために古いバージョンのNuxt.jsを使うのも、仕方ないとはいえ、微妙だなーと。
AWS Lambdaなら最近v8系サポートされたので、Lambdaの方が良いかも？とは思います。&lt;/p&gt;
&lt;p&gt;読んだだけだと、srcとfunctionsディレクトリの存在がいまいちわからなかったので、ちゃんと理解するためには、一度写経してみる必要がありそう。&lt;/p&gt;
&lt;h2&gt;React Nativeで自社サービスのiOS/Androidアプリをリプレイスした話 - ぴよログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.piyo.tech/posts/2018-04-11-react-native/&quot;&gt;https://blog.piyo.tech/posts/2018-04-11-react-native/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ソニックガーデンで、Remottyのネイティブアプリをリプレースして、React Nativeで再実装した話。&lt;/p&gt;
&lt;p&gt;iOS/Android個別にリソースをかけられない場合に、React Nativeという選択肢はたしかにアリだと思う。
ただ、バージョンアップとかが早いので、それなりの工数を継続的にかけてアップデートしてった方が良さそう。&lt;/p&gt;
&lt;p&gt;ちょうどReact Nativeを触っているので、各種の「これ使ってる」が参考になりました。&lt;/p&gt;
&lt;p&gt;Androidが弱そう、というのはあまり意識してなかったので、ライブラリ単位などで確認しながら進める必要がありますね。&lt;/p&gt;
&lt;h2&gt;Github projectsが実際に使えるレベルになっていたのでみんな使っていいと思う - そーだいなるらくがき帳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://soudai.hatenablog.com/entry/2018/04/10/103218&quot;&gt;https://soudai.hatenablog.com/entry/2018/04/10/103218&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/github/&quot;&gt;GitHub&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私も、出た当初に期待して調べてみたら、いろいろ出来なくて使わなくなってた。&lt;/p&gt;
&lt;p&gt;この記事読んだら、良くなってるっぽいので、一度個人的に使ってみようと思う。&lt;/p&gt;
&lt;h2&gt;Pull RequestごとにStorybookがビルドされたら最高じゃね？ - Studio Andy&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://studio-andy.hatenablog.com/entry/2018/04/08/001436&quot;&gt;http://studio-andy.hatenablog.com/entry/2018/04/08/001436&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Storybookを手軽に確認できる環境づくりの話。&lt;/p&gt;
&lt;p&gt;Storybook自体、まだ使ったこと無いですが、UIパーツを確認しやすそうでいいですよね。&lt;/p&gt;
&lt;p&gt;また、PRのタイミングで環境を作って壊す、というのも良いですね。Heroku Review Appsもうまく使えば便利そう。&lt;/p&gt;
&lt;h2&gt;初見から実務でReact NativeやったAndroidエンジニアが社内LTで所感を共有しました – AnyPay Tech Blog – Medium&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/anypay-tech-blog/bbca760f8c7f&quot;&gt;https://medium.com/anypay-tech-blog/bbca760f8c7f&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Androidエンジニアが、React Nativeを実務でやってみた話。&lt;/p&gt;
&lt;p&gt;たしかに、エラー起こった時の調査が難しい気はしている。
構成要素増えるので、仕方ない部分ではあるけど。&lt;/p&gt;
&lt;p&gt;個人的にもReact Nativeでアプリを作ろうとしているけど、まだRedux使うところまで進んでないので、がんばる。&lt;/p&gt;
&lt;p&gt;にしても、社内でLTやったり、ってのはいいですね。&lt;/p&gt;
&lt;h2&gt;ゼロから始めるPWA入門 // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/syumai/zerokarashi-merupwaru-men&quot;&gt;https://speakerdeck.com/syumai/zerokarashi-merupwaru-men&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PWAの概要と開発に関するTipsがうまくまとまってるスライド。&lt;/p&gt;
&lt;p&gt;Dev Toolsの使い方とか、Lighthouseについてとかも書いてあるので、開発する前にさらっと見直すのが良さそう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/04/06]]></title><description><![CDATA[2018/04/06のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/04/06/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/04/06/</guid><pubDate>Fri, 06 Apr 2018 11:06:10 GMT</pubDate><content:encoded>&lt;h2&gt;コードレビューの機械的な指摘はDangerに任せる - LCL Engineers’ Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techblog.lclco.com/entry/2017/12/29/211627&quot;&gt;http://techblog.lclco.com/entry/2017/12/29/211627&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;danger.import_dangerfile&lt;/code&gt; を利用して、組織独自の共通チェックを切り出しておくのは良さそう。&lt;/p&gt;
&lt;p&gt;ただ、受託の会社で、各案件で利用しているチケット管理ツール・運営方法などが違ってる場合には、「共通チェック」として切り出せるものはかなり限定的になりそう。。？&lt;/p&gt;
&lt;h2&gt;API 設計ガイド  |  Cloud API  |  Google Cloud&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/apis/design/?hl=ja&quot;&gt;https://cloud.google.com/apis/design/?hl=ja&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もともとあったドキュメントが、最近日本語化された感じ？&lt;/p&gt;
&lt;p&gt;gRPCの話だったら、個人的にはあんまり使わないかなーと思ったけど、REST APIの話も含まれているっぽいので、あとで読む。
結構ボリュームありそう。。。&lt;/p&gt;
&lt;h2&gt;開発現場に学ぶ、円滑なコードレビューに必要な8つの手法 〜手段から準備、実施時期まで徹底解説〜 - エンジニアHub｜若手Webエンジニアのキャリアを考える！&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://employment.en-japan.com/engineerhub/entry/2018/04/03/110000&quot;&gt;https://employment.en-japan.com/engineerhub/entry/2018/04/03/110000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/teamwork/&quot;&gt;teamwork&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ソニックガーデンの方の記事。&lt;/p&gt;
&lt;p&gt;「ルールを決める」ってのは確かに重要ですね。また、そのルールを定期的に確認・レビューしていくのも必要ですね。（スプリントの開始・終了あたりのタイミングとか？）&lt;/p&gt;
&lt;p&gt;コードレビュー数ランキング、面白そうだと思ったけど、弊社だとお客さん環境でレビューしてたりするので、平等なランキングを作るのは難しそう。自社organizationだけランキング、なら作れるかも？&lt;/p&gt;
&lt;p&gt;「質問する」という前提も共有しておく必要がありますね。&lt;br&gt;
海外のエンジニアとやり取りすることが多いので、「Why did you use XXX instead of YYY?」とか書いた時に煽ってると勘違いされない関係性の作成が必要。（英語力が足りない、ってのもある）&lt;/p&gt;
&lt;h2&gt;【完全新機能】DB認証情報やOAuthキーを一元管理可能なAWS Secrets Managerが発表されました！ ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/cloud/aws/secrets-manager/&quot;&gt;https://dev.classmethod.jp/cloud/aws/secrets-manager/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/aws/&quot;&gt;AWS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDSへの接続情報ローテーションを、簡単に設定できるのか。&lt;/p&gt;
&lt;p&gt;それと、個別のkey : valueを設定しておいて、AWSのSDKを利用して取得してこれるっぽい。
Vaultと同じようなイメージかもしれないけど、全部をAWSが管理してくれるのは楽ですね。
「機密情報１つあたり、$0.40/月」 ってのは、地味に高いかもしれないですが。。&lt;/p&gt;
&lt;h2&gt;【小ネタ】CircleCIのManual Approvalを利用したシンプルなブランチ/タグ運用 ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/ci/simple-branch-tag-operations-with-circleci-manual-approval/&quot;&gt;https://dev.classmethod.jp/ci/simple-branch-tag-operations-with-circleci-manual-approval/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/cd/&quot;&gt;CD&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dev.classmethod.jp/ci/simple-bran…
個人的には、2の方法にしちゃうことが多いかなぁ。
PRの形にしておけば、その差分が見えるし。（たいてい、量が多くて見てないけど）&lt;/p&gt;
&lt;p&gt;ただ、Manual Approvalは良さげ。何かのタイミングで使ってみよう。&lt;/p&gt;
&lt;h2&gt;見てるページを全部保存するという行ない - Diary&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://diary.app.ssig33.com/347&quot;&gt;https://diary.app.ssig33.com/347&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;「どっかで見たと思うんだけどどこにあるか思い出せない」みたいな情報も「自分が見た範囲内から検索」ができるとあっさり見つかったりします。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これがしたかった。
ただ、PDFまでは考えてなかったなー。
Google driveと連携させるってのも頭良いな。&lt;/p&gt;
&lt;h2&gt;Amazon Elasticsearch Service の Kibana にログイン機能を追加できるようになりました ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/cloud/aws/amazon-elasticsearch-service-kibana-user-authentication/&quot;&gt;https://dev.classmethod.jp/cloud/aws/amazon-elasticsearch-service-kibana-user-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/aws/&quot;&gt;AWS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/elasticsearch/&quot;&gt;Elasticsearch&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/kibana/&quot;&gt;Kibana&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ようやくKibanaにログイン機能が！
昔、一瞬使ってみたときは認証周りがめんどーだったので止めたことが。。&lt;/p&gt;
&lt;p&gt;cognitoを使うっぽい。こっちもまともに使ったことないので、一度やってみたいなー。&lt;/p&gt;
&lt;h2&gt;(デザイン初心者向け)メルカリのデザインチュートリアルを作ってみた(ホーム画面UI編)｜ココディー｜note&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://note.mu/co_co_d3/n/n4e910ec83b60&quot;&gt;https://note.mu/co&lt;em&gt;co&lt;/em&gt;d3/n/n4e910ec83b60&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;単純にsketchの始め方としてもいい記事。
デザインセンスが壊滅的なので、こんな感じでトレースしてったら、いい感じのデザインが出来るようになるかな。。優先度の問題はあるけど。&lt;/p&gt;
&lt;h2&gt;関数の話 - ( ꒪⌓꒪) ゆるよろ日記&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://yuroyoro.hatenablog.com/entry/2018/04/03/112830&quot;&gt;http://yuroyoro.hatenablog.com/entry/2018/04/03/112830&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;p&gt;実際の業務で使わないとしても、関数型の思想に触れておくことは大事かも。&lt;/p&gt;
&lt;h2&gt;kotlinでも検出できるCustom Lintを作成してみた - DMM inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.dmm.com/entry/2018/04/03/kotlin-custom-lint&quot;&gt;https://inside.dmm.com/entry/2018/04/03/kotlin-custom-lint&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いろんな人とチームを組んで開発しようとすると、コードレビュー以前に機械的にチェックしたいものは増えてきますよね。
また、Android標準のLintの仕組みに追加でき、Android Studio上に出てくるのは良いですね。&lt;/p&gt;
&lt;p&gt;実装するためのおまじない？準備？はそんなに多くない印象で良いのですが、
PSIの構造を把握して、チェック処理実装に落とすのが難しそうな印象。&lt;/p&gt;
&lt;h2&gt;九州商船の「弊社WEB予約サービスに対する不正アクセスに関する最終報告」は全てのエンジニアに読んでほしい - orangeitems’s diary&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.orangeitems.com/entry/2018/04/02/202052&quot;&gt;http://www.orangeitems.com/entry/2018/04/02/202052&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;・不正アクセスは起こってみるとだいたいが稚拙なところを狙われている。技術的には高いレベルではない場合が多い。いわゆる戸締りを忘れたぐらいなレベル。しかし攻撃者は全部のドアを開けようとしてくるからタチが悪い。ドアを設けないのが一番のセキュリティー対策。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大事ですよねー。&lt;/p&gt;
&lt;p&gt;ただ、サービス止めたり、ログが多く出る設定にしたりってのは、サービス特性によっては難しい気がする。
（そもそも、そのへんの検討すらしてない、ってのはまずいでしょうけど。。）&lt;/p&gt;
&lt;p&gt;にしても、「社外の専門家により構成される調査委員会を設置」とか、ちゃんとしてる感がすごい。固い系企業？のこういうところは見習わないといけないのかも。&lt;/p&gt;
&lt;h2&gt;Vueを昔触った後Reactをどっぷり触ってもう一回Vueを触ってReactに戻って得た感想 – 📜inuscript🐶 – Medium&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/inuscript/vue-and-react-comparision-6c7cb44f18ba&quot;&gt;https://medium.com/inuscript/vue-and-react-comparision-6c7cb44f18ba&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react/&quot;&gt;React&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/vue.js/&quot;&gt;Vue.js&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;誤解を恐れずに言うと、Reactはsimple寄りで、Vueはeasy寄りというのが近いかなと感じている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これがわかりやすいですね。
React単独で考えると、少ないAPIを覚えるだけで良いけど、結局Reduxとかを使ったりで悩みが出てくる。
それを超えると、SFCなんかで役割をきれいに分割しつつ、大規模にも耐えやすい。&lt;/p&gt;
&lt;p&gt;逆にVue.jsは便利なAPIがいろいろあって、そのへんをうまく使っていけば、簡単に構築できる。
公式のライブラリも充実していて、それを利用するだけである程度のものが作れる。&lt;/p&gt;
&lt;p&gt;というイメージがあるだけで、ちゃんと実装したことがあまり無いので、ちゃんとやらないとなぁと。
また、変化の速度も速そうなので、式年遷宮していきつつ、手を動かしていかないと付いていけないですね。&lt;/p&gt;
&lt;h2&gt;自社コーポレートサイトにサイト内検索を導入しました ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/server-side/elasticsearch/site-search-in-corporate-site/&quot;&gt;https://dev.classmethod.jp/server-side/elasticsearch/site-search-in-corporate-site/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/aws/&quot;&gt;AWS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/elasticsearch/&quot;&gt;Elasticsearch&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“サーチテンプレートによる検索のエンドポイントのみをパブリックに開放”
ってことが出来るのか。知らなかった。
フロントから直接ES呼んじゃうってのは、ちょっと不安があるけど、調べてみよう。&lt;/p&gt;
&lt;h2&gt;Osushiに見るフロントエンドのセキュリティ // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/shibe97/osushinijian-ruhurontoendofalsesekiyuritei&quot;&gt;https://speakerdeck.com/shibe97/osushinijian-ruhurontoendofalsesekiyuritei&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちゃんとして復活したのがすごい。
ヘッダの話とか、めんどくさがらずにちゃんとやらないとなー。&lt;/p&gt;
&lt;h2&gt;2-wayデータバインディングが格段に実装しやすくなったAndroid data-binding 3.1.0 - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/YusukeIwaki/items/3fb4e10ac87fa1c7f6ba&quot;&gt;https://qiita.com/YusukeIwaki/items/3fb4e10ac87fa1c7f6ba&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MediatorLiveData が何者か、そのうち調べる。&lt;/p&gt;
&lt;h2&gt;3/28に公開されたRubyの脆弱性情報についてのポエム的解説 - pixiv inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.pixiv.blog/usa/3841&quot;&gt;https://inside.pixiv.blog/usa/3841&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby/&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/脆弱性/&quot;&gt;脆弱性&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あんまり観測してなかったんですが、脆弱性がいろいろ公開されてたんですね。
WEBrickのサーバーを迂闊に公開せず、信用できない値をそのまま使わない。ってことですかね。
兼業でRubyも書く自分にとっても、ゆるい感じで分かりやすくてよかった。&lt;/p&gt;
&lt;h2&gt;技術的負債のパターンと悪影響・原因・返却方法について考える - $shibayu36-&gt;blog;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.shibayu36.org/entry/2018/03/29/183000&quot;&gt;http://blog.shibayu36.org/entry/2018/03/29/183000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;負債と一言に言っちゃうけど、その中にはいろんな選択があって、そこから引き起こされる問題も、その解消方法もちがうよね。
分類して、対応規模・緊急度を可視化出来れば、機能実装との優先度付けもできそう。
なるほど。&lt;/p&gt;
&lt;h2&gt;デザインの実装を解体する技術&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/operando/dezainfalseshi-zhuang-wojie-ti-suruji-shu&quot;&gt;https://speakerdeck.com/operando/dezainfalseshi-zhuang-wojie-ti-suruji-shu&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後半のapk引っこ抜くあたりはグレーな気がするけど、adbコマンドでいろいろ出来るってのは勉強になった。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[このブログについて]]></title><description><![CDATA[このブログを始めた理由や、書いていく内容、仕組みについて]]></description><link>https://noboru-i.github.io//posts/blog/2018/04/06/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/blog/2018/04/06/</guid><pubDate>Tue, 03 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;※ 実際に書いているのは2018/4/9ですが。&lt;/p&gt;
&lt;p&gt;こんにちは。noboru-iです。&lt;/p&gt;
&lt;p&gt;今回、ポートフォリオサイトを刷新して、&lt;a href=&quot;/about/&quot;&gt;ポートフォリオ&lt;/a&gt;の内容は残しつつ、ブログを全面に押し出したページに置き換えました。&lt;/p&gt;
&lt;h2&gt;なぜ置き換えたのか&lt;/h2&gt;
&lt;p&gt;情報の収集と管理は、ずっと課題でした。&lt;/p&gt;
&lt;p&gt;良いブログ・スライドを読んでも、数日後・数週間後に読み返そうとしたときに、見つからないってことが多々ありました。&lt;/p&gt;
&lt;p&gt;一時期ははてなブックマークも使っていましたが、次第に使わなくなってしまっていました。&lt;/p&gt;
&lt;p&gt;再開しても良かったのですが、いくつか試してみたいことがあったり、“自分のコンテンツ”としてメモなどを残したかったので、ブログ形式にしました。&lt;/p&gt;
&lt;h2&gt;書いていく内容&lt;/h2&gt;
&lt;p&gt;発信する内容によって、出力先を切り替えていこうと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全な技術情報であれば、&lt;a href=&quot;https://qiita.com/noboru_i&quot;&gt;Qiita&lt;/a&gt;に。&lt;/li&gt;
&lt;li&gt;「勉強会行ってきた」など、技術も含むけどゆるい内容については&lt;a href=&quot;http://noboru.hatenablog.jp/&quot;&gt;Hatena Blog&lt;/a&gt;に。&lt;/li&gt;
&lt;li&gt;残すまでもない感想・情報については&lt;a href=&quot;https://twitter.com/noboru_i&quot;&gt;Twitter&lt;/a&gt;に。&lt;/li&gt;
&lt;li&gt;特定の記事・スライドなどのURLに対しての、残したい感想・コメントについてをここに。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;仕組みについて&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gitpitch.com/noboru-i/slide/gh-pages?p=201804-kzrb&quot; target=&quot;_blank&quot;&gt;スライド&lt;/a&gt;に書きました。&lt;/p&gt;
&lt;p&gt;ざっくり書くと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Issueに固定のフォーマットで記述。&lt;/li&gt;
&lt;li&gt;毎週1回、CircleCIでMarkdownに整形、GatsbyJSにてビルド。&lt;/li&gt;
&lt;li&gt;GitHub pagesとして配信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった感じ。&lt;/p&gt;
&lt;p&gt;GitHub Issueを書くところの障壁を減らしていければ、続けていけるかなーと思っています。&lt;/p&gt;</content:encoded></item></channel></rss>