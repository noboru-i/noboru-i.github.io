{"version":3,"sources":["webpack:///path---posts-weekly-news-2018-05-04-d04445125b8bc3348822.js","webpack:///./.cache/json/posts-weekly-news-2018-05-04.json"],"names":["webpackJsonp","427","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","twitter","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,mBAAAC,SAAA,qBAAAC,UAAA,yBAAAC,QAA0GC,KAAA,WAAAC,QAAA,YAAuCC,gBAAA,GAAAC,IAAA,gCAA2DC,gBAAmBC,GAAA,+FAAAC,KAAA,4xIAAAC,QAAu+IC,UAAA,8HAAyIC,aAAgBb,MAAA,4BAAAc,MAAA,2EAAAC,KAAA,4BAAAC,YAAA,2BAAkMC,aAAgBC,KAAA","file":"path---posts-weekly-news-2018-05-04-d04445125b8bc3348822.js","sourcesContent":["webpackJsonp([266512183076255],{\n\n/***/ 427:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Blog by noboru-i\",\"subtitle\":\"noboru-iのメモ的な何かです。\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"noboru-i\",\"twitter\":\"noboru_i\"},\"disqusShortname\":\"\",\"url\":\"https://noboru-i.github.io/\"}},\"markdownRemark\":{\"id\":\"/home/circleci/code/src/pages/articles/2018/2018-05-04.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>iOSの自動化と仕組み化 ~コードと設計に集中する~ // Speaker Deck</h2>\\n<p><a href=\\\"https://speakerdeck.com/motokiee/iosfalsezi-dong-hua-toshi-zu-mihua-kodotoshe-ji-niji-zhong-suru\\\">https://speakerdeck.com/motokiee/iosfalsezi-dong-hua-toshi-zu-mihua-kodotoshe-ji-niji-zhong-suru</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ios/\\\">iOS</a>\\n  </li>\\n</ul>\\n<p>メルカリのiOS周りの自動化・仕組み化の話。</p>\\n<p>Dangerでリリースノートの更新を促したり、ドキュメント化を促進してるのは良さげ。（具体的にはどうやってるんだろ？</p>\\n<p>CIについて、メルカリではBitriseを使ってるんですね。</p>\\n<p>自社の中核サービスであれば、ここまでしっかり作る意味は強いけど、受託で短期間のプロジェクトでどこまでやるか、というのは検討が必要な気がしますね。手軽に導入しておけば、しきい値はかなり下げられそうですが。</p>\\n<h2>ディープリンクをめぐる歴史とReact NativeにFirebase Dynamic Linksを導入する手順 - KitchHike Tech Blog</h2>\\n<p><a href=\\\"http://tech.kitchhike.com/entry/2018/04/29/222634\\\">http://tech.kitchhike.com/entry/2018/04/29/222634</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/android/\\\">Android</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/firebase/\\\">Firebase</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/react native/\\\">React Native</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ios/\\\">iOS</a>\\n  </li>\\n</ul>\\n<p>ディープリンク周りの歴史・経緯の紹介と、React Nativeでの具体的な導入事例。</p>\\n<p>Firebase Dynamic Linksの仕組みについても紹介されているので、中身がわかって良い。</p>\\n<p>この記事で紹介されているFirebaseコンソールからのDynamic Linkの作り方は、キャンペーンページなど、特定のページに飛ばしたい場合に有効ですね。</p>\\n<p><a href=\\\"https://firebase.google.com/docs/dynamic-links/use-cases/web-to-app\\\">https://firebase.google.com/docs/dynamic-links/use-cases/web-to-app</a> などのドキュメントを見ると、 <code class=\\\"language-text\\\">link</code> などを動的にしていしても良いらしく、動的なページでも同じような仕組みで処理できそうですね。</p>\\n<h2>Rails tips: 遅いクエリのログをDB設定変更なしで取るコツ（翻訳）</h2>\\n<p><a href=\\\"https://techracho.bpsinc.jp/hachi8833/2018_04_26/55463\\\">https://techracho.bpsinc.jp/hachi8833/2018<em>04</em>26/55463</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ruby/\\\">Ruby</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ruby on rails/\\\">Ruby on Rails</a>\\n  </li>\\n</ul>\\n<p><code class=\\\"language-text\\\">ActiveSupport::Notifications</code> を使って、性能の計測などが出来る話。\\nこの記事では、slow queryに該当するものを、アプリケーションのレイヤーで取得した話。</p>\\n<p><code class=\\\"language-text\\\">ActiveSupport::Notifications</code> を使えば、クエリだけじゃなく、他のものも取れそうなので、性能面で困ったときにはスッと書けると良さげ。\\nまた、Rubyで書けるので、ちょっと複雑なフィルタリングとかも簡単に書けそうでよいですね。</p>\\n<h2>エンジニアにダメ出しされたUIデザインでおさえておきたいポイント - Life is bitter</h2>\\n<p><a href=\\\"http://www.life-is-bitter.com/entry/ui_checklist\\\">http://www.life-is-bitter.com/entry/ui_checklist</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/design/\\\">Design</a>\\n  </li>\\n</ul>\\n<p>Web系のデザインを、実装するときに「こんな場合は？」と聞かれないためのチェックリスト。</p>\\n<p>逆に、エンジニアとしては、デザインを受け取って実装を始める前にチェックしたほうが良いリスト。</p>\\n<p>案件によっては、focusやhoverが必要無い場合もあると思うのですべてを定義してもらう必要は無いですが、観点としては一通りチェックしたほうが良さそうですね。</p>\\n<h2>デザインシステムにおける色の命名ルール : could</h2>\\n<p><a href=\\\"http://www.yasuhisa.com/could/article/design-sytem-color-name/\\\">http://www.yasuhisa.com/could/article/design-sytem-color-name/</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/design/\\\">Design</a>\\n  </li>\\n</ul>\\n<p>色に名前をつけましょう、また、そのつけ方の工夫の紹介。</p>\\n<p>特にAndroidでは、colors.xmlなどで色を一括で管理し、各UIではその色を利用します。\\nデザインをPSDなどのデザインデータだけでもらっていると、実装するときに名前を付けなければならず、「redとつけたら、後から他の赤っぽい色が何個もあった」といったことが起こります。\\n実際にデザインしたデザイナであれば、「この赤はXXXという意図があり、こっちの赤とは別」といった意図があると思います。\\nそういった意図をエンジニアと共有するのは時間がかかるので、デザイナの方で色名を決めてくれるのは良さそうだなーと思いました。(意図まで共有した方が良いんですけどね)</p>\\n<h2>本当にあった怖いプログラム（クソコード事例集） - 株式会社アクシア</h2>\\n<p><a href=\\\"https://axia.co.jp/2018-04-27\\\">https://axia.co.jp/2018-04-27</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n</ul>\\n<p>Twitterで募集したクソコードをカテゴライズして、経験とともにコメント入ったもの。</p>\\n<p>結果、リーダブルコードの逆を言っているだけのものも多そうですね。\\nまた、個人的には「場合によってはOKじゃね。」ってのもありました。</p>\\n<p>とはいえ、わかりやすくまとまっていて、時間が経っても基本的に変わらないものだと思うので、いいまとめでした。</p>\",\"fields\":{\"tagSlugs\":[\"/tags/i-os/\",\"/tags/android/\",\"/tags/firebase/\",\"/tags/react-native/\",\"/tags/ruby/\",\"/tags/ruby-on-rails/\",\"/tags/design/\"]},\"frontmatter\":{\"title\":\"Weekly news at 2018/05/04\",\"tags\":[\"iOS\",\"Android\",\"Firebase\",\"React Native\",\"Ruby\",\"Ruby on Rails\",\"Design\"],\"date\":\"2018-05-04T17:01:05+00:00\",\"description\":\"2018/05/04のウィークリーニュース\"}}},\"pathContext\":{\"slug\":\"/posts/weekly-news/2018/05/04/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-weekly-news-2018-05-04-d04445125b8bc3348822.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Blog by noboru-i\",\"subtitle\":\"noboru-iのメモ的な何かです。\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"noboru-i\",\"twitter\":\"noboru_i\"},\"disqusShortname\":\"\",\"url\":\"https://noboru-i.github.io/\"}},\"markdownRemark\":{\"id\":\"/home/circleci/code/src/pages/articles/2018/2018-05-04.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>iOSの自動化と仕組み化 ~コードと設計に集中する~ // Speaker Deck</h2>\\n<p><a href=\\\"https://speakerdeck.com/motokiee/iosfalsezi-dong-hua-toshi-zu-mihua-kodotoshe-ji-niji-zhong-suru\\\">https://speakerdeck.com/motokiee/iosfalsezi-dong-hua-toshi-zu-mihua-kodotoshe-ji-niji-zhong-suru</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ios/\\\">iOS</a>\\n  </li>\\n</ul>\\n<p>メルカリのiOS周りの自動化・仕組み化の話。</p>\\n<p>Dangerでリリースノートの更新を促したり、ドキュメント化を促進してるのは良さげ。（具体的にはどうやってるんだろ？</p>\\n<p>CIについて、メルカリではBitriseを使ってるんですね。</p>\\n<p>自社の中核サービスであれば、ここまでしっかり作る意味は強いけど、受託で短期間のプロジェクトでどこまでやるか、というのは検討が必要な気がしますね。手軽に導入しておけば、しきい値はかなり下げられそうですが。</p>\\n<h2>ディープリンクをめぐる歴史とReact NativeにFirebase Dynamic Linksを導入する手順 - KitchHike Tech Blog</h2>\\n<p><a href=\\\"http://tech.kitchhike.com/entry/2018/04/29/222634\\\">http://tech.kitchhike.com/entry/2018/04/29/222634</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/android/\\\">Android</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/firebase/\\\">Firebase</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/react native/\\\">React Native</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ios/\\\">iOS</a>\\n  </li>\\n</ul>\\n<p>ディープリンク周りの歴史・経緯の紹介と、React Nativeでの具体的な導入事例。</p>\\n<p>Firebase Dynamic Linksの仕組みについても紹介されているので、中身がわかって良い。</p>\\n<p>この記事で紹介されているFirebaseコンソールからのDynamic Linkの作り方は、キャンペーンページなど、特定のページに飛ばしたい場合に有効ですね。</p>\\n<p><a href=\\\"https://firebase.google.com/docs/dynamic-links/use-cases/web-to-app\\\">https://firebase.google.com/docs/dynamic-links/use-cases/web-to-app</a> などのドキュメントを見ると、 <code class=\\\"language-text\\\">link</code> などを動的にしていしても良いらしく、動的なページでも同じような仕組みで処理できそうですね。</p>\\n<h2>Rails tips: 遅いクエリのログをDB設定変更なしで取るコツ（翻訳）</h2>\\n<p><a href=\\\"https://techracho.bpsinc.jp/hachi8833/2018_04_26/55463\\\">https://techracho.bpsinc.jp/hachi8833/2018<em>04</em>26/55463</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ruby/\\\">Ruby</a>\\n  </li>\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/ruby on rails/\\\">Ruby on Rails</a>\\n  </li>\\n</ul>\\n<p><code class=\\\"language-text\\\">ActiveSupport::Notifications</code> を使って、性能の計測などが出来る話。\\nこの記事では、slow queryに該当するものを、アプリケーションのレイヤーで取得した話。</p>\\n<p><code class=\\\"language-text\\\">ActiveSupport::Notifications</code> を使えば、クエリだけじゃなく、他のものも取れそうなので、性能面で困ったときにはスッと書けると良さげ。\\nまた、Rubyで書けるので、ちょっと複雑なフィルタリングとかも簡単に書けそうでよいですね。</p>\\n<h2>エンジニアにダメ出しされたUIデザインでおさえておきたいポイント - Life is bitter</h2>\\n<p><a href=\\\"http://www.life-is-bitter.com/entry/ui_checklist\\\">http://www.life-is-bitter.com/entry/ui_checklist</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/design/\\\">Design</a>\\n  </li>\\n</ul>\\n<p>Web系のデザインを、実装するときに「こんな場合は？」と聞かれないためのチェックリスト。</p>\\n<p>逆に、エンジニアとしては、デザインを受け取って実装を始める前にチェックしたほうが良いリスト。</p>\\n<p>案件によっては、focusやhoverが必要無い場合もあると思うのですべてを定義してもらう必要は無いですが、観点としては一通りチェックしたほうが良さそうですね。</p>\\n<h2>デザインシステムにおける色の命名ルール : could</h2>\\n<p><a href=\\\"http://www.yasuhisa.com/could/article/design-sytem-color-name/\\\">http://www.yasuhisa.com/could/article/design-sytem-color-name/</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n  <li class=\\\"post-single__tags-list-item\\\">\\n    <a class=\\\"post-single__tags-list-item-link\\\" href=\\\"/tags/design/\\\">Design</a>\\n  </li>\\n</ul>\\n<p>色に名前をつけましょう、また、そのつけ方の工夫の紹介。</p>\\n<p>特にAndroidでは、colors.xmlなどで色を一括で管理し、各UIではその色を利用します。\\nデザインをPSDなどのデザインデータだけでもらっていると、実装するときに名前を付けなければならず、「redとつけたら、後から他の赤っぽい色が何個もあった」といったことが起こります。\\n実際にデザインしたデザイナであれば、「この赤はXXXという意図があり、こっちの赤とは別」といった意図があると思います。\\nそういった意図をエンジニアと共有するのは時間がかかるので、デザイナの方で色名を決めてくれるのは良さそうだなーと思いました。(意図まで共有した方が良いんですけどね)</p>\\n<h2>本当にあった怖いプログラム（クソコード事例集） - 株式会社アクシア</h2>\\n<p><a href=\\\"https://axia.co.jp/2018-04-27\\\">https://axia.co.jp/2018-04-27</a></p>\\n<ul class=\\\"post-single__tags-list\\\">\\n</ul>\\n<p>Twitterで募集したクソコードをカテゴライズして、経験とともにコメント入ったもの。</p>\\n<p>結果、リーダブルコードの逆を言っているだけのものも多そうですね。\\nまた、個人的には「場合によってはOKじゃね。」ってのもありました。</p>\\n<p>とはいえ、わかりやすくまとまっていて、時間が経っても基本的に変わらないものだと思うので、いいまとめでした。</p>\",\"fields\":{\"tagSlugs\":[\"/tags/i-os/\",\"/tags/android/\",\"/tags/firebase/\",\"/tags/react-native/\",\"/tags/ruby/\",\"/tags/ruby-on-rails/\",\"/tags/design/\"]},\"frontmatter\":{\"title\":\"Weekly news at 2018/05/04\",\"tags\":[\"iOS\",\"Android\",\"Firebase\",\"React Native\",\"Ruby\",\"Ruby on Rails\",\"Design\"],\"date\":\"2018-05-04T17:01:05+00:00\",\"description\":\"2018/05/04のウィークリーニュース\"}}},\"pathContext\":{\"slug\":\"/posts/weekly-news/2018/05/04/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-weekly-news-2018-05-04.json\n// module id = 427\n// module chunks = 266512183076255"],"sourceRoot":""}