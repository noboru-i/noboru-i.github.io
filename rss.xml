<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by noboru-i]]></title><description><![CDATA[noboru-iのメモ的な何かです。]]></description><link>https://noboru-i.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Thu, 19 Apr 2018 15:08:10 GMT</lastBuildDate><item><title><![CDATA[Weekly news at 2018/04/13]]></title><description><![CDATA[2018/04/13のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/04/13/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/04/13/</guid><pubDate>Fri, 13 Apr 2018 17:01:06 GMT</pubDate><content:encoded>&lt;h2&gt;Gitのブランチ名を返すエイリアスを設定したら地味に捗った - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/kmszk/items/3de61ef75e30dedd6f6e&quot;&gt;https://qiita.com/kmszk/items/3de61ef75e30dedd6f6e&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/git/&quot;&gt;Git&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/shell/&quot;&gt;Shell&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;aliasを設定して、それを利用してGitのコマンドを使うようになったら便利だった、という話。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git push&lt;/code&gt; とかは、オプション設定したら良いのでは？と思わなくもないですが。&lt;/p&gt;
&lt;p&gt;ただ、実行するコマンドが同一になることで、補完が効きやすい、というのは良いですね。&lt;/p&gt;
&lt;h2&gt;システムで「性別」の情報を扱う前に知っておくべきこと - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/aoshirobo/items/32deb45cb8c8b87d65a4&quot;&gt;https://qiita.com/aoshirobo/items/32deb45cb8c8b87d65a4&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;システムで性別を扱う場合に考えることなど。&lt;/p&gt;
&lt;p&gt;たしかに、何も考えずに「会員登録時に生年月日と性別とぐらい入れさせるか」としてしまうことはある気がします。&lt;/p&gt;
&lt;p&gt;「本当に入力させる必要がある？」というのは、確認したほうが良いですね。&lt;/p&gt;
&lt;p&gt;また、コード体系がISO 5218として定められている、というのも知りませんでした。
たしかに、どうやってコード化する？というのはどーでもいい反面、悩み始めると終わらないものなので、「国際規格がこう言っているから」というのがあるのは助かりますね。&lt;/p&gt;
&lt;h2&gt;React Redux Real World Examples 〜先人から学ぶReact Reduxの知恵〜 | blog.tai2.net&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.tai2.net/real-world-redux.html&quot;&gt;https://blog.tai2.net/real-world-redux.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reduxで設計・実装する際に悩みそうな部分を、実際に使われているアプリケーションのコードを読み解くことで解決しようとしている。&lt;/p&gt;
&lt;p&gt;他のアプリケーションのコードを読んで見ることはあるけど、ここまで多数のアプリを、一定の関心事ごとに読んでいく、というのはやったことなかった。
ここまでまとまってると、Reduxについて他に悩んだことが出てきた場合にも、これを手がかりにコードを読み進めることができそう。&lt;/p&gt;
&lt;p&gt;ただ、実際にReduxによる実装をしたことが無いので、始めるとき・悩んだときにはこれを読み、コードを読んで活かしていきたい。&lt;/p&gt;
&lt;h2&gt;メルカリ Microservices Team による Terraform 運用とその中で開発したOSSの紹介 - Mercari Engineering Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.mercari.com/entry/2018/04/09/110000&quot;&gt;http://tech.mercari.com/entry/2018/04/09/110000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/infra/&quot;&gt;Infra&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Terraformの運用していく中で、 mercari/tfnotify を作った話。&lt;/p&gt;
&lt;p&gt;現在のメルカリでは、 &lt;em&gt;中央集権的なリポジトリですべての Terraform コードを管理&lt;/em&gt; しているらしい。
なるほど。&lt;/p&gt;
&lt;p&gt;重複したタイトル・メッセージだったら、古いコメントを削除するなど、実際に運用している感があっていいですね。&lt;/p&gt;
&lt;p&gt;「GitHubのPRにコメントする」と聞くとDangerをすぐに連想しましたが、ここまで特化しているものだと、個別のアプリケーションにしてしまって正解なのかも。（特に言及もされてないけど。）&lt;/p&gt;
&lt;p&gt;本筋からはずれますが、 &lt;a href=&quot;https://github.com/noboru-i/danger-checkstyle_format&quot;&gt;noboru-i/danger-checkstyle_format&lt;/a&gt; のREADMEにも、こんな感じでキャプチャ付けておくのが良さそう、と思いました。&lt;/p&gt;
&lt;h2&gt;Ruby on Rails 5.2正式版発表。Active Storageによるクラウドストレージ対応、Redisでのキャッシュ対応など － Publickey&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.publickey1.jp/blog/18/ruby_on_rails_52active_storageredis.html&quot;&gt;http://www.publickey1.jp/blog/18/ruby&lt;em&gt;on&lt;/em&gt;rails&lt;em&gt;52active&lt;/em&gt;storageredis.html&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby/&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby on rails/&quot;&gt;Ruby on Rails&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちょうど&lt;code class=&quot;language-text&quot;&gt;rails new&lt;/code&gt;したところだったけど、Rails 5.2.0って出たばっかりだったのね。&lt;/p&gt;
&lt;p&gt;Active Storageによる、S3とActive Recordの連携は、仕事でも使う場面がありそうな組み合わせなので、一度体験しておいた方が良さそう。&lt;/p&gt;
&lt;p&gt;Content Security Policyは、最近のセキュリティに対する意識の高まりから、勉強しておいたほうが良さそう。
DSLで書くにしても、もとを知らないと書けないし。&lt;/p&gt;
&lt;p&gt;それにしても、Railsはまだ新しい機能を追加していくんですね。&lt;/p&gt;
&lt;h2&gt;Nuxt.jsとFirebaseでSPA×SSR×PWA×サーバーレスを実現する - DMM inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.dmm.com/entry/2018/04/10/nuxt-firebase&quot;&gt;https://inside.dmm.com/entry/2018/04/10/nuxt-firebase&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/serverless/&quot;&gt;Serverless&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMMの中の人が、タイトル通りの構成を作る話。&lt;/p&gt;
&lt;p&gt;前半で、Nuxt.jsやSPAについて簡単に説明してあり、非エンジニアには最初にこのぐらい説明したらいいのかなーと、参考になった。&lt;/p&gt;
&lt;p&gt;Cloud FunctionsでNuxt.jsを動作させてしまう、ってのはちょっと特殊かも？と思いました。
また、そのために古いバージョンのNuxt.jsを使うのも、仕方ないとはいえ、微妙だなーと。
AWS Lambdaなら最近v8系サポートされたので、Lambdaの方が良いかも？とは思います。&lt;/p&gt;
&lt;p&gt;読んだだけだと、srcとfunctionsディレクトリの存在がいまいちわからなかったので、ちゃんと理解するためには、一度写経してみる必要がありそう。&lt;/p&gt;
&lt;h2&gt;React Nativeで自社サービスのiOS/Androidアプリをリプレイスした話 - ぴよログ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.piyo.tech/posts/2018-04-11-react-native/&quot;&gt;https://blog.piyo.tech/posts/2018-04-11-react-native/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ソニックガーデンで、Remottyのネイティブアプリをリプレースして、React Nativeで再実装した話。&lt;/p&gt;
&lt;p&gt;iOS/Android個別にリソースをかけられない場合に、React Nativeという選択肢はたしかにアリだと思う。
ただ、バージョンアップとかが早いので、それなりの工数を継続的にかけてアップデートしてった方が良さそう。&lt;/p&gt;
&lt;p&gt;ちょうどReact Nativeを触っているので、各種の「これ使ってる」が参考になりました。&lt;/p&gt;
&lt;p&gt;Androidが弱そう、というのはあまり意識してなかったので、ライブラリ単位などで確認しながら進める必要がありますね。&lt;/p&gt;
&lt;h2&gt;Github projectsが実際に使えるレベルになっていたのでみんな使っていいと思う - そーだいなるらくがき帳&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://soudai.hatenablog.com/entry/2018/04/10/103218&quot;&gt;https://soudai.hatenablog.com/entry/2018/04/10/103218&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/github/&quot;&gt;GitHub&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私も、出た当初に期待して調べてみたら、いろいろ出来なくて使わなくなってた。&lt;/p&gt;
&lt;p&gt;この記事読んだら、良くなってるっぽいので、一度個人的に使ってみようと思う。&lt;/p&gt;
&lt;h2&gt;Pull RequestごとにStorybookがビルドされたら最高じゃね？ - Studio Andy&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://studio-andy.hatenablog.com/entry/2018/04/08/001436&quot;&gt;http://studio-andy.hatenablog.com/entry/2018/04/08/001436&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Storybookを手軽に確認できる環境づくりの話。&lt;/p&gt;
&lt;p&gt;Storybook自体、まだ使ったこと無いですが、UIパーツを確認しやすそうでいいですよね。&lt;/p&gt;
&lt;p&gt;また、PRのタイミングで環境を作って壊す、というのも良いですね。Heroku Review Appsもうまく使えば便利そう。&lt;/p&gt;
&lt;h2&gt;初見から実務でReact NativeやったAndroidエンジニアが社内LTで所感を共有しました – AnyPay Tech Blog – Medium&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/anypay-tech-blog/bbca760f8c7f&quot;&gt;https://medium.com/anypay-tech-blog/bbca760f8c7f&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react native/&quot;&gt;React Native&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Androidエンジニアが、React Nativeを実務でやってみた話。&lt;/p&gt;
&lt;p&gt;たしかに、エラー起こった時の調査が難しい気はしている。
構成要素増えるので、仕方ない部分ではあるけど。&lt;/p&gt;
&lt;p&gt;個人的にもReact Nativeでアプリを作ろうとしているけど、まだRedux使うところまで進んでないので、がんばる。&lt;/p&gt;
&lt;p&gt;にしても、社内でLTやったり、ってのはいいですね。&lt;/p&gt;
&lt;h2&gt;ゼロから始めるPWA入門 // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/syumai/zerokarashi-merupwaru-men&quot;&gt;https://speakerdeck.com/syumai/zerokarashi-merupwaru-men&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/pwa/&quot;&gt;PWA&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PWAの概要と開発に関するTipsがうまくまとまってるスライド。&lt;/p&gt;
&lt;p&gt;Dev Toolsの使い方とか、Lighthouseについてとかも書いてあるので、開発する前にさらっと見直すのが良さそう。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Weekly news at 2018/04/06]]></title><description><![CDATA[2018/04/06のウィークリーニュース]]></description><link>https://noboru-i.github.io//posts/weekly-news/2018/04/06/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/weekly-news/2018/04/06/</guid><pubDate>Fri, 06 Apr 2018 11:06:10 GMT</pubDate><content:encoded>&lt;h2&gt;コードレビューの機械的な指摘はDangerに任せる - LCL Engineers’ Blog&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://techblog.lclco.com/entry/2017/12/29/211627&quot;&gt;http://techblog.lclco.com/entry/2017/12/29/211627&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;danger.import_dangerfile&lt;/code&gt; を利用して、組織独自の共通チェックを切り出しておくのは良さそう。&lt;/p&gt;
&lt;p&gt;ただ、受託の会社で、各案件で利用しているチケット管理ツール・運営方法などが違ってる場合には、「共通チェック」として切り出せるものはかなり限定的になりそう。。？&lt;/p&gt;
&lt;h2&gt;API 設計ガイド  |  Cloud API  |  Google Cloud&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/apis/design/?hl=ja&quot;&gt;https://cloud.google.com/apis/design/?hl=ja&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もともとあったドキュメントが、最近日本語化された感じ？&lt;/p&gt;
&lt;p&gt;gRPCの話だったら、個人的にはあんまり使わないかなーと思ったけど、REST APIの話も含まれているっぽいので、あとで読む。
結構ボリュームありそう。。。&lt;/p&gt;
&lt;h2&gt;開発現場に学ぶ、円滑なコードレビューに必要な8つの手法 〜手段から準備、実施時期まで徹底解説〜 - エンジニアHub｜若手Webエンジニアのキャリアを考える！&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://employment.en-japan.com/engineerhub/entry/2018/04/03/110000&quot;&gt;https://employment.en-japan.com/engineerhub/entry/2018/04/03/110000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/teamwork/&quot;&gt;teamwork&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ソニックガーデンの方の記事。&lt;/p&gt;
&lt;p&gt;「ルールを決める」ってのは確かに重要ですね。また、そのルールを定期的に確認・レビューしていくのも必要ですね。（スプリントの開始・終了あたりのタイミングとか？）&lt;/p&gt;
&lt;p&gt;コードレビュー数ランキング、面白そうだと思ったけど、弊社だとお客さん環境でレビューしてたりするので、平等なランキングを作るのは難しそう。自社organizationだけランキング、なら作れるかも？&lt;/p&gt;
&lt;p&gt;「質問する」という前提も共有しておく必要がありますね。&lt;br&gt;
海外のエンジニアとやり取りすることが多いので、「Why did you use XXX instead of YYY?」とか書いた時に煽ってると勘違いされない関係性の作成が必要。（英語力が足りない、ってのもある）&lt;/p&gt;
&lt;h2&gt;【完全新機能】DB認証情報やOAuthキーを一元管理可能なAWS Secrets Managerが発表されました！ ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/cloud/aws/secrets-manager/&quot;&gt;https://dev.classmethod.jp/cloud/aws/secrets-manager/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/aws/&quot;&gt;AWS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDSへの接続情報ローテーションを、簡単に設定できるのか。&lt;/p&gt;
&lt;p&gt;それと、個別のkey : valueを設定しておいて、AWSのSDKを利用して取得してこれるっぽい。
Vaultと同じようなイメージかもしれないけど、全部をAWSが管理してくれるのは楽ですね。
「機密情報１つあたり、$0.40/月」 ってのは、地味に高いかもしれないですが。。&lt;/p&gt;
&lt;h2&gt;【小ネタ】CircleCIのManual Approvalを利用したシンプルなブランチ/タグ運用 ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/ci/simple-branch-tag-operations-with-circleci-manual-approval/&quot;&gt;https://dev.classmethod.jp/ci/simple-branch-tag-operations-with-circleci-manual-approval/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/cd/&quot;&gt;CD&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dev.classmethod.jp/ci/simple-bran…
個人的には、2の方法にしちゃうことが多いかなぁ。
PRの形にしておけば、その差分が見えるし。（たいてい、量が多くて見てないけど）&lt;/p&gt;
&lt;p&gt;ただ、Manual Approvalは良さげ。何かのタイミングで使ってみよう。&lt;/p&gt;
&lt;h2&gt;見てるページを全部保存するという行ない - Diary&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://diary.app.ssig33.com/347&quot;&gt;https://diary.app.ssig33.com/347&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;「どっかで見たと思うんだけどどこにあるか思い出せない」みたいな情報も「自分が見た範囲内から検索」ができるとあっさり見つかったりします。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これがしたかった。
ただ、PDFまでは考えてなかったなー。
Google driveと連携させるってのも頭良いな。&lt;/p&gt;
&lt;h2&gt;Amazon Elasticsearch Service の Kibana にログイン機能を追加できるようになりました ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/cloud/aws/amazon-elasticsearch-service-kibana-user-authentication/&quot;&gt;https://dev.classmethod.jp/cloud/aws/amazon-elasticsearch-service-kibana-user-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/aws/&quot;&gt;AWS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/elasticsearch/&quot;&gt;Elasticsearch&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/kibana/&quot;&gt;Kibana&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ようやくKibanaにログイン機能が！
昔、一瞬使ってみたときは認証周りがめんどーだったので止めたことが。。&lt;/p&gt;
&lt;p&gt;cognitoを使うっぽい。こっちもまともに使ったことないので、一度やってみたいなー。&lt;/p&gt;
&lt;h2&gt;(デザイン初心者向け)メルカリのデザインチュートリアルを作ってみた(ホーム画面UI編)｜ココディー｜note&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://note.mu/co_co_d3/n/n4e910ec83b60&quot;&gt;https://note.mu/co&lt;em&gt;co&lt;/em&gt;d3/n/n4e910ec83b60&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;単純にsketchの始め方としてもいい記事。
デザインセンスが壊滅的なので、こんな感じでトレースしてったら、いい感じのデザインが出来るようになるかな。。優先度の問題はあるけど。&lt;/p&gt;
&lt;h2&gt;関数の話 - ( ꒪⌓꒪) ゆるよろ日記&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://yuroyoro.hatenablog.com/entry/2018/04/03/112830&quot;&gt;http://yuroyoro.hatenablog.com/entry/2018/04/03/112830&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
&lt;/ul&gt;
&lt;p&gt;実際の業務で使わないとしても、関数型の思想に触れておくことは大事かも。&lt;/p&gt;
&lt;h2&gt;kotlinでも検出できるCustom Lintを作成してみた - DMM inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.dmm.com/entry/2018/04/03/kotlin-custom-lint&quot;&gt;https://inside.dmm.com/entry/2018/04/03/kotlin-custom-lint&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ci/&quot;&gt;CI&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いろんな人とチームを組んで開発しようとすると、コードレビュー以前に機械的にチェックしたいものは増えてきますよね。
また、Android標準のLintの仕組みに追加でき、Android Studio上に出てくるのは良いですね。&lt;/p&gt;
&lt;p&gt;実装するためのおまじない？準備？はそんなに多くない印象で良いのですが、
PSIの構造を把握して、チェック処理実装に落とすのが難しそうな印象。&lt;/p&gt;
&lt;h2&gt;九州商船の「弊社WEB予約サービスに対する不正アクセスに関する最終報告」は全てのエンジニアに読んでほしい - orangeitems’s diary&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.orangeitems.com/entry/2018/04/02/202052&quot;&gt;http://www.orangeitems.com/entry/2018/04/02/202052&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;・不正アクセスは起こってみるとだいたいが稚拙なところを狙われている。技術的には高いレベルではない場合が多い。いわゆる戸締りを忘れたぐらいなレベル。しかし攻撃者は全部のドアを開けようとしてくるからタチが悪い。ドアを設けないのが一番のセキュリティー対策。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大事ですよねー。&lt;/p&gt;
&lt;p&gt;ただ、サービス止めたり、ログが多く出る設定にしたりってのは、サービス特性によっては難しい気がする。
（そもそも、そのへんの検討すらしてない、ってのはまずいでしょうけど。。）&lt;/p&gt;
&lt;p&gt;にしても、「社外の専門家により構成される調査委員会を設置」とか、ちゃんとしてる感がすごい。固い系企業？のこういうところは見習わないといけないのかも。&lt;/p&gt;
&lt;h2&gt;Vueを昔触った後Reactをどっぷり触ってもう一回Vueを触ってReactに戻って得た感想 – 📜inuscript🐶 – Medium&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/inuscript/vue-and-react-comparision-6c7cb44f18ba&quot;&gt;https://medium.com/inuscript/vue-and-react-comparision-6c7cb44f18ba&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/react/&quot;&gt;React&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/vue.js/&quot;&gt;Vue.js&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;誤解を恐れずに言うと、Reactはsimple寄りで、Vueはeasy寄りというのが近いかなと感じている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これがわかりやすいですね。
React単独で考えると、少ないAPIを覚えるだけで良いけど、結局Reduxとかを使ったりで悩みが出てくる。
それを超えると、SFCなんかで役割をきれいに分割しつつ、大規模にも耐えやすい。&lt;/p&gt;
&lt;p&gt;逆にVue.jsは便利なAPIがいろいろあって、そのへんをうまく使っていけば、簡単に構築できる。
公式のライブラリも充実していて、それを利用するだけである程度のものが作れる。&lt;/p&gt;
&lt;p&gt;というイメージがあるだけで、ちゃんと実装したことがあまり無いので、ちゃんとやらないとなぁと。
また、変化の速度も速そうなので、式年遷宮していきつつ、手を動かしていかないと付いていけないですね。&lt;/p&gt;
&lt;h2&gt;自社コーポレートサイトにサイト内検索を導入しました ｜ Developers.IO&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.classmethod.jp/server-side/elasticsearch/site-search-in-corporate-site/&quot;&gt;https://dev.classmethod.jp/server-side/elasticsearch/site-search-in-corporate-site/&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/aws/&quot;&gt;AWS&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/elasticsearch/&quot;&gt;Elasticsearch&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“サーチテンプレートによる検索のエンドポイントのみをパブリックに開放”
ってことが出来るのか。知らなかった。
フロントから直接ES呼んじゃうってのは、ちょっと不安があるけど、調べてみよう。&lt;/p&gt;
&lt;h2&gt;Osushiに見るフロントエンドのセキュリティ // Speaker Deck&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/shibe97/osushinijian-ruhurontoendofalsesekiyuritei&quot;&gt;https://speakerdeck.com/shibe97/osushinijian-ruhurontoendofalsesekiyuritei&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/frontend/&quot;&gt;Frontend&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/security/&quot;&gt;security&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちゃんとして復活したのがすごい。
ヘッダの話とか、めんどくさがらずにちゃんとやらないとなー。&lt;/p&gt;
&lt;h2&gt;2-wayデータバインディングが格段に実装しやすくなったAndroid data-binding 3.1.0 - Qiita&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://qiita.com/YusukeIwaki/items/3fb4e10ac87fa1c7f6ba&quot;&gt;https://qiita.com/YusukeIwaki/items/3fb4e10ac87fa1c7f6ba&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MediatorLiveData が何者か、そのうち調べる。&lt;/p&gt;
&lt;h2&gt;3/28に公開されたRubyの脆弱性情報についてのポエム的解説 - pixiv inside&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://inside.pixiv.blog/usa/3841&quot;&gt;https://inside.pixiv.blog/usa/3841&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/ruby/&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/脆弱性/&quot;&gt;脆弱性&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あんまり観測してなかったんですが、脆弱性がいろいろ公開されてたんですね。
WEBrickのサーバーを迂闊に公開せず、信用できない値をそのまま使わない。ってことですかね。
兼業でRubyも書く自分にとっても、ゆるい感じで分かりやすくてよかった。&lt;/p&gt;
&lt;h2&gt;技術的負債のパターンと悪影響・原因・返却方法について考える - $shibayu36-&gt;blog;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.shibayu36.org/entry/2018/03/29/183000&quot;&gt;http://blog.shibayu36.org/entry/2018/03/29/183000&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/設計/&quot;&gt;設計&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;負債と一言に言っちゃうけど、その中にはいろんな選択があって、そこから引き起こされる問題も、その解消方法もちがうよね。
分類して、対応規模・緊急度を可視化出来れば、機能実装との優先度付けもできそう。
なるほど。&lt;/p&gt;
&lt;h2&gt;デザインの実装を解体する技術&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/operando/dezainfalseshi-zhuang-wojie-ti-suruji-shu&quot;&gt;https://speakerdeck.com/operando/dezainfalseshi-zhuang-wojie-ti-suruji-shu&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;post-single__tags-list&quot;&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/android/&quot;&gt;Android&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;post-single__tags-list-item&quot;&gt;
    &lt;a class=&quot;post-single__tags-list-item-link&quot; href=&quot;/tags/design/&quot;&gt;Design&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後半のapk引っこ抜くあたりはグレーな気がするけど、adbコマンドでいろいろ出来るってのは勉強になった。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[このブログについて]]></title><description><![CDATA[このブログを始めた理由や、書いていく内容、仕組みについて]]></description><link>https://noboru-i.github.io//posts/blog/2018/04/06/</link><guid isPermaLink="false">https://noboru-i.github.io//posts/blog/2018/04/06/</guid><pubDate>Tue, 03 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;※ 実際に書いているのは2018/4/9ですが。&lt;/p&gt;
&lt;p&gt;こんにちは。noboru-iです。&lt;/p&gt;
&lt;p&gt;今回、ポートフォリオサイトを刷新して、&lt;a href=&quot;/about/&quot;&gt;ポートフォリオ&lt;/a&gt;の内容は残しつつ、ブログを全面に押し出したページに置き換えました。&lt;/p&gt;
&lt;h2&gt;なぜ置き換えたのか&lt;/h2&gt;
&lt;p&gt;情報の収集と管理は、ずっと課題でした。&lt;/p&gt;
&lt;p&gt;良いブログ・スライドを読んでも、数日後・数週間後に読み返そうとしたときに、見つからないってことが多々ありました。&lt;/p&gt;
&lt;p&gt;一時期ははてなブックマークも使っていましたが、次第に使わなくなってしまっていました。&lt;/p&gt;
&lt;p&gt;再開しても良かったのですが、いくつか試してみたいことがあったり、“自分のコンテンツ”としてメモなどを残したかったので、ブログ形式にしました。&lt;/p&gt;
&lt;h2&gt;書いていく内容&lt;/h2&gt;
&lt;p&gt;発信する内容によって、出力先を切り替えていこうと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全な技術情報であれば、&lt;a href=&quot;https://qiita.com/noboru_i&quot;&gt;Qiita&lt;/a&gt;に。&lt;/li&gt;
&lt;li&gt;「勉強会行ってきた」など、技術も含むけどゆるい内容については&lt;a href=&quot;http://noboru.hatenablog.jp/&quot;&gt;Hatena Blog&lt;/a&gt;に。&lt;/li&gt;
&lt;li&gt;残すまでもない感想・情報については&lt;a href=&quot;https://twitter.com/noboru_i&quot;&gt;Twitter&lt;/a&gt;に。&lt;/li&gt;
&lt;li&gt;特定の記事・スライドなどのURLに対しての、残したい感想・コメントについてをここに。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;仕組みについて&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gitpitch.com/noboru-i/slide/gh-pages?p=201804-kzrb&quot; target=&quot;_blank&quot;&gt;スライド&lt;/a&gt;に書きました。&lt;/p&gt;
&lt;p&gt;ざっくり書くと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Issueに固定のフォーマットで記述。&lt;/li&gt;
&lt;li&gt;毎週1回、CircleCIでMarkdownに整形、GatsbyJSにてビルド。&lt;/li&gt;
&lt;li&gt;GitHub pagesとして配信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった感じ。&lt;/p&gt;
&lt;p&gt;GitHub Issueを書くところの障壁を減らしていければ、続けていけるかなーと思っています。&lt;/p&gt;</content:encoded></item></channel></rss>